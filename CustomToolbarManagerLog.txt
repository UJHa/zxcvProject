스크립트 컴파일이 완료되었습니다.
[test]CustomToolbar
[testumJson]Application.dataPath(C:/Users/user/Documents/Github/zxcvProject/Assets)
[testFile]fileName(Action.json)
[testFile]fileName(AnimationFadeInfo.json)
[testFile]fileName(AttackInfo.json)
[testFile]fileName(CharacterRoleProfile.json)
[testFile]fileName(CharacterRoleState.json)
[testFile]fileName(CharacterStat.json)
[testFile]fileName(ActionTable.cs)
[testFile]fileName(AnimationFadeInfoTable.cs)
[testFile]fileName(AttackInfoTable.cs)
[testFile]fileName(CharacterRoleStateTable.cs)
[testFile]fileName(CharacterStatTable.cs)
[testFile]fileName(DataTable.cs)
[testFile]fileName(SampleTable.cs)
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[jsonLine]key(id)type(Integer)typeStr(int)
public int id { get; set; }
[jsonLine]key(name)type(String)typeStr(string)
public string name { get; set; }
[jsonLine]key(idle)type(Array)typeStr(string[])
public string[] idle { get; set; }
[jsonLine]key(walk)type(Array)typeStr(string[])
public string[] walk { get; set; }
[jsonLine]key(run)type(Array)typeStr(string[])
public string[] run { get; set; }
[jsonLine]key(runStop)type(Array)typeStr(string[])
public string[] runStop { get; set; }
[jsonLine]key(jumpUp)type(Array)typeStr(string[])
public string[] jumpUp { get; set; }
[jsonLine]key(jumpDown)type(Array)typeStr(string[])
public string[] jumpDown { get; set; }
[jsonLine]key(landing)type(Array)typeStr(string[])
public string[] landing { get; set; }
[jsonLine]key(normalDamaged)type(Array)typeStr(string[])
public string[] normalDamaged { get; set; }
[jsonLine]key(airborneDamaged)type(Array)typeStr(string[])
public string[] airborneDamaged { get; set; }
[jsonLine]key(airbornePowerDownDamaged)type(Array)typeStr(string[])
public string[] airbornePowerDownDamaged { get; set; }
[jsonLine]key(knockBackDamaged)type(Array)typeStr(string[])
public string[] knockBackDamaged { get; set; }
[jsonLine]key(flyAwayDamaged)type(Array)typeStr(string[])
public string[] flyAwayDamaged { get; set; }
[jsonLine]key(damagedAirborneLoop)type(Array)typeStr(string[])
public string[] damagedAirborneLoop { get; set; }
[jsonLine]key(damagedLanding)type(Array)typeStr(string[])
public string[] damagedLanding { get; set; }
[jsonLine]key(wakeUp)type(Array)typeStr(string[])
public string[] wakeUp { get; set; }
[jsonLine]key(dead)type(Array)typeStr(string[])
public string[] dead { get; set; }
[jsonLine]key(getItem)type(Array)typeStr(string[])
public string[] getItem { get; set; }
[jsonLine]key(weekAttack1)type(Array)typeStr(string[])
public string[] weekAttack1 { get; set; }
[jsonLine]key(weekAttack2)type(Array)typeStr(string[])
public string[] weekAttack2 { get; set; }
[jsonLine]key(weekAttack3)type(Array)typeStr(string[])
public string[] weekAttack3 { get; set; }
[jsonLine]key(airWeekAttack1)type(Array)typeStr(string[])
public string[] airWeekAttack1 { get; set; }
[jsonLine]key(airWeekAttack2)type(Array)typeStr(string[])
public string[] airWeekAttack2 { get; set; }
[jsonLine]key(airWeekAttack3)type(Array)typeStr(string[])
public string[] airWeekAttack3 { get; set; }
[jsonLine]key(strongAttack1)type(Array)typeStr(string[])
public string[] strongAttack1 { get; set; }
[jsonLine]key(strongAttack2)type(Array)typeStr(string[])
public string[] strongAttack2 { get; set; }
length(193)
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(29,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(57,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(59,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(60,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(61,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(62,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(63,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(64,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(65,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
스크립트 컴파일이 완료되었습니다.
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(29,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(57,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(59,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(60,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(61,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(62,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(63,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(64,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(65,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
스크립트 컴파일이 완료되었습니다.
Assets\ExternalRecourses\Travis Game Assets\Hit Impact Effects\Demo Scene\Scripts\HitImpactEffectsPreview.cs(28,21): warning CS0108: 'HitImpactEffectsPreview.light' hides inherited member 'Component.light'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(63,36): warning CS0108: 'UIManagerTool.GetEventSystemRaycastResults()' hides inherited member 'UIManager.GetEventSystemRaycastResults()'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(72,21): warning CS0108: 'UIManagerTool.IsRaycastUI()' hides inherited member 'UIManager.IsRaycastUI()'. Use the new keyword if hiding was intended.
Assets\Scripts\Action\MoveSet.cs(139,26): warning CS0168: The variable 'e' is declared but never used
Assets\Scripts\DrawDebugCharacter.cs(46,21): warning CS0219: The variable 'pivot' is assigned but its value is never used
Assets\Scripts\UI\UIHudManager.cs(35,30): warning CS0168: The variable 'e' is declared but never used
Assets\Scripts\UI\UIActionPlayerPage.cs(42,40): warning CS0414: The field 'UIActionPlayerPage._startRate' is assigned but its value is never used
Assets\Scripts\State\Npc\NpcJumpUpState.cs(7,19): warning CS0414: The field 'NpcJumpUpState._jumpTimer' is assigned but its value is never used
Assets\Scripts\PartCollider.cs(5,43): warning CS0414: The field 'PartCollider._colliderType' is assigned but its value is never used
Assets\Scripts\Character.cs(168,26): warning CS0414: The field 'Character._leftWallObjs' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(45,23): warning CS0414: The field 'UIActionPlayerPage._pinStart' is assigned but its value is never used
Assets\Scripts\Projectile\Projectile.cs(14,19): warning CS0414: The field 'Projectile._moveTween' is assigned but its value is never used
Assets\Scripts\Character.cs(170,26): warning CS0414: The field 'Character._frontWallObjs' is assigned but its value is never used
Assets\Scripts\Utils\Input\InputManager.cs(50,17): warning CS0414: The field 'InputManager._holdMaxSize' is assigned but its value is never used
Assets\Scripts\State\LandingState.cs(8,18): warning CS0414: The field 'LandingState._inputDelayMSec' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(46,23): warning CS0414: The field 'UIActionPlayerPage._pinEnd' is assigned but its value is never used
Assets\Scripts\State\RunStopState.cs(6,19): warning CS0414: The field 'RunStopState._jumpTimer' is assigned but its value is never used
Assets\Scripts\State\Damaged\KnockBackDamagedState.cs(8,18): warning CS0414: The field 'KnockBackDamagedState._knockBackTimeMilliSec' is assigned but its value is never used
Assets\Scripts\State\Npc\NpcJumpDownState.cs(6,19): warning CS0414: The field 'NpcJumpDownState._jumpTimer' is assigned but its value is never used
Assets\Scripts\AttackCollider.cs(19,41): warning CS0414: The field 'AttackCollider._colliderType' is assigned but its value is never used
Assets\Scripts\SceneMain\SceneMoveSet.cs(10,21): warning CS0414: The field 'SceneMoveSet.testFrame' is assigned but its value is never used
Assets\Scripts\Character.cs(169,26): warning CS0414: The field 'Character._rightWallObjs' is assigned but its value is never used
Assets\Scripts\Character.cs(171,26): warning CS0414: The field 'Character._backWallObjs' is assigned but its value is never used
Assets\Scripts\Character.cs(160,18): warning CS0414: The field 'Character._checkGround' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(43,40): warning CS0414: The field 'UIActionPlayerPage._endRate' is assigned but its value is never used
스크립트 컴파일이 완료되었습니다.
[test]CustomToolbar
[testumJson]Application.dataPath(C:/Users/user/Documents/Github/zxcvProject/Assets)
[testFile]fileName(Action.json)
[testFile]fileName(AnimationFadeInfo.json)
[testFile]fileName(AttackInfo.json)
[testFile]fileName(CharacterRoleProfile.json)
[testFile]fileName(CharacterRoleState.json)
[testFile]fileName(CharacterStat.json)
[testFile]fileName(ActionTable.cs)
[testFile]fileName(AnimationFadeInfoTable.cs)
[testFile]fileName(AttackInfoTable.cs)
[testFile]fileName(CharacterStatTable.cs)
[testFile]fileName(DataTable.cs)
[testFile]fileName(SampleTable.cs)
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[lineCheck]Construct(19/22)
_declareInfo(25/28)
_toStringInfo(31/33)
[jsonLine]key(id)type(Integer)typeStr(int)
public int id { get; set; }
[jsonLine]key(name)type(String)typeStr(string)
public string name { get; set; }
[jsonLine]key(idle)type(Array)typeStr(string[])
public string[] idle { get; set; }
[jsonLine]key(walk)type(Array)typeStr(string[])
public string[] walk { get; set; }
[jsonLine]key(run)type(Array)typeStr(string[])
public string[] run { get; set; }
[jsonLine]key(runStop)type(Array)typeStr(string[])
public string[] runStop { get; set; }
[jsonLine]key(jumpUp)type(Array)typeStr(string[])
public string[] jumpUp { get; set; }
[jsonLine]key(jumpDown)type(Array)typeStr(string[])
public string[] jumpDown { get; set; }
[jsonLine]key(landing)type(Array)typeStr(string[])
public string[] landing { get; set; }
[jsonLine]key(normalDamaged)type(Array)typeStr(string[])
public string[] normalDamaged { get; set; }
[jsonLine]key(airborneDamaged)type(Array)typeStr(string[])
public string[] airborneDamaged { get; set; }
[jsonLine]key(airbornePowerDownDamaged)type(Array)typeStr(string[])
public string[] airbornePowerDownDamaged { get; set; }
[jsonLine]key(knockBackDamaged)type(Array)typeStr(string[])
public string[] knockBackDamaged { get; set; }
[jsonLine]key(flyAwayDamaged)type(Array)typeStr(string[])
public string[] flyAwayDamaged { get; set; }
[jsonLine]key(damagedAirborneLoop)type(Array)typeStr(string[])
public string[] damagedAirborneLoop { get; set; }
[jsonLine]key(damagedLanding)type(Array)typeStr(string[])
public string[] damagedLanding { get; set; }
[jsonLine]key(wakeUp)type(Array)typeStr(string[])
public string[] wakeUp { get; set; }
[jsonLine]key(dead)type(Array)typeStr(string[])
public string[] dead { get; set; }
[jsonLine]key(getItem)type(Array)typeStr(string[])
public string[] getItem { get; set; }
[jsonLine]key(weekAttack1)type(Array)typeStr(string[])
public string[] weekAttack1 { get; set; }
[jsonLine]key(weekAttack2)type(Array)typeStr(string[])
public string[] weekAttack2 { get; set; }
[jsonLine]key(weekAttack3)type(Array)typeStr(string[])
public string[] weekAttack3 { get; set; }
[jsonLine]key(airWeekAttack1)type(Array)typeStr(string[])
public string[] airWeekAttack1 { get; set; }
[jsonLine]key(airWeekAttack2)type(Array)typeStr(string[])
public string[] airWeekAttack2 { get; set; }
[jsonLine]key(airWeekAttack3)type(Array)typeStr(string[])
public string[] airWeekAttack3 { get; set; }
[jsonLine]key(strongAttack1)type(Array)typeStr(string[])
public string[] strongAttack1 { get; set; }
[jsonLine]key(strongAttack2)type(Array)typeStr(string[])
public string[] strongAttack2 { get; set; }
length(193)
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(29,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(57,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(59,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(60,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(61,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(62,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(63,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(64,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(65,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
스크립트 컴파일이 완료되었습니다.
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(29,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(57,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(59,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(60,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(61,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(62,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(63,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(64,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(65,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
CustomToolbarManager must be instantiated using the ScriptableObject.CreateInstance method instead of new CustomToolbarManager.
스크립트 컴파일이 완료되었습니다.
[test]CustomToolbar
[testumJson]Application.dataPath(C:/Users/user/Documents/Github/zxcvProject/Assets)
[testFile]fileName(Action.json)
[testFile]fileName(AnimationFadeInfo.json)
[testFile]fileName(AttackInfo.json)
[testFile]fileName(CharacterRoleProfile.json)
[testFile]fileName(CharacterRoleState.json)
[testFile]fileName(CharacterStat.json)
[testFile]fileName(ActionTable.cs)
[testFile]fileName(AnimationFadeInfoTable.cs)
[testFile]fileName(AttackInfoTable.cs)
[testFile]fileName(CharacterRoleStateTable.cs)
[testFile]fileName(CharacterStatTable.cs)
[testFile]fileName(DataTable.cs)
[testFile]fileName(SampleTable.cs)
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[lineCheck]Construct(19/22)
_declareInfo(25/28)
_toStringInfo(31/33)
[jsonLine]key(id)type(Integer)typeStr(int)
public int id { get; set; }
[jsonLine]key(name)type(String)typeStr(string)
public string name { get; set; }
[jsonLine]key(idle)type(Array)typeStr(string[])
public string[] idle { get; set; }
[jsonLine]key(walk)type(Array)typeStr(string[])
public string[] walk { get; set; }
[jsonLine]key(run)type(Array)typeStr(string[])
public string[] run { get; set; }
[jsonLine]key(runStop)type(Array)typeStr(string[])
public string[] runStop { get; set; }
[jsonLine]key(jumpUp)type(Array)typeStr(string[])
public string[] jumpUp { get; set; }
[jsonLine]key(jumpDown)type(Array)typeStr(string[])
public string[] jumpDown { get; set; }
[jsonLine]key(landing)type(Array)typeStr(string[])
public string[] landing { get; set; }
[jsonLine]key(normalDamaged)type(Array)typeStr(string[])
public string[] normalDamaged { get; set; }
[jsonLine]key(airborneDamaged)type(Array)typeStr(string[])
public string[] airborneDamaged { get; set; }
[jsonLine]key(airbornePowerDownDamaged)type(Array)typeStr(string[])
public string[] airbornePowerDownDamaged { get; set; }
[jsonLine]key(knockBackDamaged)type(Array)typeStr(string[])
public string[] knockBackDamaged { get; set; }
[jsonLine]key(flyAwayDamaged)type(Array)typeStr(string[])
public string[] flyAwayDamaged { get; set; }
[jsonLine]key(damagedAirborneLoop)type(Array)typeStr(string[])
public string[] damagedAirborneLoop { get; set; }
[jsonLine]key(damagedLanding)type(Array)typeStr(string[])
public string[] damagedLanding { get; set; }
[jsonLine]key(wakeUp)type(Array)typeStr(string[])
public string[] wakeUp { get; set; }
[jsonLine]key(dead)type(Array)typeStr(string[])
public string[] dead { get; set; }
[jsonLine]key(getItem)type(Array)typeStr(string[])
public string[] getItem { get; set; }
[jsonLine]key(weekAttack1)type(Array)typeStr(string[])
public string[] weekAttack1 { get; set; }
[jsonLine]key(weekAttack2)type(Array)typeStr(string[])
public string[] weekAttack2 { get; set; }
[jsonLine]key(weekAttack3)type(Array)typeStr(string[])
public string[] weekAttack3 { get; set; }
[jsonLine]key(airWeekAttack1)type(Array)typeStr(string[])
public string[] airWeekAttack1 { get; set; }
[jsonLine]key(airWeekAttack2)type(Array)typeStr(string[])
public string[] airWeekAttack2 { get; set; }
[jsonLine]key(airWeekAttack3)type(Array)typeStr(string[])
public string[] airWeekAttack3 { get; set; }
[jsonLine]key(strongAttack1)type(Array)typeStr(string[])
public string[] strongAttack1 { get; set; }
[jsonLine]key(strongAttack2)type(Array)typeStr(string[])
public string[] strongAttack2 { get; set; }
length(193)
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(29,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(57,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(59,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(60,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(61,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(62,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(63,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(64,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
Assets\Scripts\DataClass\CharacterRoleStateTable.cs(65,1): error CS1529: A using clause must precede all other elements defined in the namespace except extern alias declarations
스크립트 컴파일이 완료되었습니다.
Assets\ExternalRecourses\Travis Game Assets\Hit Impact Effects\Demo Scene\Scripts\HitImpactEffectsPreview.cs(28,21): warning CS0108: 'HitImpactEffectsPreview.light' hides inherited member 'Component.light'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(63,36): warning CS0108: 'UIManagerTool.GetEventSystemRaycastResults()' hides inherited member 'UIManager.GetEventSystemRaycastResults()'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(72,21): warning CS0108: 'UIManagerTool.IsRaycastUI()' hides inherited member 'UIManager.IsRaycastUI()'. Use the new keyword if hiding was intended.
Assets\Scripts\DrawDebugCharacter.cs(46,21): warning CS0219: The variable 'pivot' is assigned but its value is never used
Assets\Scripts\Action\MoveSet.cs(139,26): warning CS0168: The variable 'e' is declared but never used
Assets\Scripts\UI\UIHudManager.cs(35,30): warning CS0168: The variable 'e' is declared but never used
Assets\Scripts\UI\UIActionPlayerPage.cs(42,40): warning CS0414: The field 'UIActionPlayerPage._startRate' is assigned but its value is never used
Assets\Scripts\Utils\Input\InputManager.cs(50,17): warning CS0414: The field 'InputManager._holdMaxSize' is assigned but its value is never used
Assets\Scripts\Character.cs(170,26): warning CS0414: The field 'Character._frontWallObjs' is assigned but its value is never used
Assets\Scripts\State\LandingState.cs(8,18): warning CS0414: The field 'LandingState._inputDelayMSec' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(46,23): warning CS0414: The field 'UIActionPlayerPage._pinEnd' is assigned but its value is never used
Assets\Scripts\Projectile\Projectile.cs(14,19): warning CS0414: The field 'Projectile._moveTween' is assigned but its value is never used
Assets\Scripts\State\Npc\NpcJumpUpState.cs(7,19): warning CS0414: The field 'NpcJumpUpState._jumpTimer' is assigned but its value is never used
Assets\Scripts\Character.cs(160,18): warning CS0414: The field 'Character._checkGround' is assigned but its value is never used
Assets\Scripts\Character.cs(169,26): warning CS0414: The field 'Character._rightWallObjs' is assigned but its value is never used
Assets\Scripts\Character.cs(171,26): warning CS0414: The field 'Character._backWallObjs' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(45,23): warning CS0414: The field 'UIActionPlayerPage._pinStart' is assigned but its value is never used
Assets\Scripts\AttackCollider.cs(19,41): warning CS0414: The field 'AttackCollider._colliderType' is assigned but its value is never used
Assets\Scripts\SceneMain\SceneMoveSet.cs(10,21): warning CS0414: The field 'SceneMoveSet.testFrame' is assigned but its value is never used
Assets\Scripts\PartCollider.cs(5,43): warning CS0414: The field 'PartCollider._colliderType' is assigned but its value is never used
Assets\Scripts\State\RunStopState.cs(6,19): warning CS0414: The field 'RunStopState._jumpTimer' is assigned but its value is never used
Assets\Scripts\State\Npc\NpcJumpDownState.cs(6,19): warning CS0414: The field 'NpcJumpDownState._jumpTimer' is assigned but its value is never used
Assets\Scripts\Character.cs(168,26): warning CS0414: The field 'Character._leftWallObjs' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(43,40): warning CS0414: The field 'UIActionPlayerPage._endRate' is assigned but its value is never used
Assets\Scripts\State\Damaged\KnockBackDamagedState.cs(8,18): warning CS0414: The field 'KnockBackDamagedState._knockBackTimeMilliSec' is assigned but its value is never used
스크립트 컴파일이 완료되었습니다.
[test]CustomToolbar
[testumJson]Application.dataPath(C:/Users/user/Documents/Github/zxcvProject/Assets)
[testFile]fileName(Action.json)
[testFile]fileName(AnimationFadeInfo.json)
[testFile]fileName(AttackInfo.json)
[testFile]fileName(CharacterRoleProfile.json)
[testFile]fileName(CharacterRoleState.json)
[testFile]fileName(CharacterStat.json)
[testFile]fileName(ActionTable.cs)
[testFile]fileName(AnimationFadeInfoTable.cs)
[testFile]fileName(AttackInfoTable.cs)
[testFile]fileName(CharacterStatTable.cs)
[testFile]fileName(DataTable.cs)
[testFile]fileName(SampleTable.cs)
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[lineCheck]Construct(19/22)
_declareInfo(25/28)
_toStringInfo(31/33)
[jsonLine]key(id)type(Integer)typeStr(int)
        public int id { get; set; }
[jsonLine]key(name)type(String)typeStr(string)
        public string name { get; set; }
[jsonLine]key(idle)type(Array)typeStr(string[])
        public string[] idle { get; set; }
[jsonLine]key(walk)type(Array)typeStr(string[])
        public string[] walk { get; set; }
[jsonLine]key(run)type(Array)typeStr(string[])
        public string[] run { get; set; }
[jsonLine]key(runStop)type(Array)typeStr(string[])
        public string[] runStop { get; set; }
[jsonLine]key(jumpUp)type(Array)typeStr(string[])
        public string[] jumpUp { get; set; }
[jsonLine]key(jumpDown)type(Array)typeStr(string[])
        public string[] jumpDown { get; set; }
[jsonLine]key(landing)type(Array)typeStr(string[])
        public string[] landing { get; set; }
[jsonLine]key(normalDamaged)type(Array)typeStr(string[])
        public string[] normalDamaged { get; set; }
[jsonLine]key(airborneDamaged)type(Array)typeStr(string[])
        public string[] airborneDamaged { get; set; }
[jsonLine]key(airbornePowerDownDamaged)type(Array)typeStr(string[])
        public string[] airbornePowerDownDamaged { get; set; }
[jsonLine]key(knockBackDamaged)type(Array)typeStr(string[])
        public string[] knockBackDamaged { get; set; }
[jsonLine]key(flyAwayDamaged)type(Array)typeStr(string[])
        public string[] flyAwayDamaged { get; set; }
[jsonLine]key(damagedAirborneLoop)type(Array)typeStr(string[])
        public string[] damagedAirborneLoop { get; set; }
[jsonLine]key(damagedLanding)type(Array)typeStr(string[])
        public string[] damagedLanding { get; set; }
[jsonLine]key(wakeUp)type(Array)typeStr(string[])
        public string[] wakeUp { get; set; }
[jsonLine]key(dead)type(Array)typeStr(string[])
        public string[] dead { get; set; }
[jsonLine]key(getItem)type(Array)typeStr(string[])
        public string[] getItem { get; set; }
[jsonLine]key(weekAttack1)type(Array)typeStr(string[])
        public string[] weekAttack1 { get; set; }
[jsonLine]key(weekAttack2)type(Array)typeStr(string[])
        public string[] weekAttack2 { get; set; }
[jsonLine]key(weekAttack3)type(Array)typeStr(string[])
        public string[] weekAttack3 { get; set; }
[jsonLine]key(airWeekAttack1)type(Array)typeStr(string[])
        public string[] airWeekAttack1 { get; set; }
[jsonLine]key(airWeekAttack2)type(Array)typeStr(string[])
        public string[] airWeekAttack2 { get; set; }
[jsonLine]key(airWeekAttack3)type(Array)typeStr(string[])
        public string[] airWeekAttack3 { get; set; }
[jsonLine]key(strongAttack1)type(Array)typeStr(string[])
        public string[] strongAttack1 { get; set; }
[jsonLine]key(strongAttack2)type(Array)typeStr(string[])
        public string[] strongAttack2 { get; set; }
length(185)
Assets\ExternalRecourses\Travis Game Assets\Hit Impact Effects\Demo Scene\Scripts\HitImpactEffectsPreview.cs(28,21): warning CS0108: 'HitImpactEffectsPreview.light' hides inherited member 'Component.light'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(63,36): warning CS0108: 'UIManagerTool.GetEventSystemRaycastResults()' hides inherited member 'UIManager.GetEventSystemRaycastResults()'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(72,21): warning CS0108: 'UIManagerTool.IsRaycastUI()' hides inherited member 'UIManager.IsRaycastUI()'. Use the new keyword if hiding was intended.
Assets\Scripts\DrawDebugCharacter.cs(46,21): warning CS0219: The variable 'pivot' is assigned but its value is never used
Assets\Scripts\Action\MoveSet.cs(139,26): warning CS0168: The variable 'e' is declared but never used
Assets\Scripts\UI\UIHudManager.cs(35,30): warning CS0168: The variable 'e' is declared but never used
Assets\Scripts\SceneMain\SceneMoveSet.cs(10,21): warning CS0414: The field 'SceneMoveSet.testFrame' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(46,23): warning CS0414: The field 'UIActionPlayerPage._pinEnd' is assigned but its value is never used
Assets\Scripts\Projectile\Projectile.cs(14,19): warning CS0414: The field 'Projectile._moveTween' is assigned but its value is never used
Assets\Scripts\State\RunStopState.cs(6,19): warning CS0414: The field 'RunStopState._jumpTimer' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(42,40): warning CS0414: The field 'UIActionPlayerPage._startRate' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(45,23): warning CS0414: The field 'UIActionPlayerPage._pinStart' is assigned but its value is never used
Assets\Scripts\State\Npc\NpcJumpDownState.cs(6,19): warning CS0414: The field 'NpcJumpDownState._jumpTimer' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(43,40): warning CS0414: The field 'UIActionPlayerPage._endRate' is assigned but its value is never used
Assets\Scripts\Character.cs(168,26): warning CS0414: The field 'Character._leftWallObjs' is assigned but its value is never used
Assets\Scripts\Character.cs(170,26): warning CS0414: The field 'Character._frontWallObjs' is assigned but its value is never used
Assets\Scripts\AttackCollider.cs(19,41): warning CS0414: The field 'AttackCollider._colliderType' is assigned but its value is never used
Assets\Scripts\State\Damaged\KnockBackDamagedState.cs(8,18): warning CS0414: The field 'KnockBackDamagedState._knockBackTimeMilliSec' is assigned but its value is never used
Assets\Scripts\State\LandingState.cs(8,18): warning CS0414: The field 'LandingState._inputDelayMSec' is assigned but its value is never used
Assets\Scripts\Character.cs(160,18): warning CS0414: The field 'Character._checkGround' is assigned but its value is never used
Assets\Scripts\Character.cs(169,26): warning CS0414: The field 'Character._rightWallObjs' is assigned but its value is never used
Assets\Scripts\State\Npc\NpcJumpUpState.cs(7,19): warning CS0414: The field 'NpcJumpUpState._jumpTimer' is assigned but its value is never used
Assets\Scripts\Utils\Input\InputManager.cs(50,17): warning CS0414: The field 'InputManager._holdMaxSize' is assigned but its value is never used
Assets\Scripts\PartCollider.cs(5,43): warning CS0414: The field 'PartCollider._colliderType' is assigned but its value is never used
Assets\Scripts\Character.cs(171,26): warning CS0414: The field 'Character._backWallObjs' is assigned but its value is never used
스크립트 컴파일이 완료되었습니다.
[test]CustomToolbar
[testumJson]Application.dataPath(C:/Users/user/Documents/Github/zxcvProject/Assets)
[testFile]fileName(Action.json)
[testFile]fileName(AnimationFadeInfo.json)
[testFile]fileName(AttackInfo.json)
[testFile]fileName(CharacterRoleProfile.json)
[testFile]fileName(CharacterRoleState.json)
[testFile]fileName(CharacterStat.json)
[testFile]fileName(ActionTable_old.cs)
[testFile]fileName(AnimationFadeInfoTable_old.cs)
[testFile]fileName(AttackInfoTable_old.cs)
[testFile]fileName(CharacterRoleStateTable_old.cs)
[testFile]fileName(CharacterStatTable_old.cs)
[testFile]fileName(DataTable.cs)
[testFile]fileName(SampleTable.cs)
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[lineCheck]Construct(19/22)
_declareInfo(25/28)
_toStringInfo(31/33)
[jsonLine]key(id)type(Integer)typeStr(int)
        public int id { get; set; }
[jsonLine]key(name)type(String)typeStr(string)
        public string name { get; set; }
[jsonLine]key(idle)type(Array)typeStr(string[])
        public string[] idle { get; set; }
[jsonLine]key(walk)type(Array)typeStr(string[])
        public string[] walk { get; set; }
[jsonLine]key(run)type(Array)typeStr(string[])
        public string[] run { get; set; }
[jsonLine]key(runStop)type(Array)typeStr(string[])
        public string[] runStop { get; set; }
[jsonLine]key(jumpUp)type(Array)typeStr(string[])
        public string[] jumpUp { get; set; }
[jsonLine]key(jumpDown)type(Array)typeStr(string[])
        public string[] jumpDown { get; set; }
[jsonLine]key(landing)type(Array)typeStr(string[])
        public string[] landing { get; set; }
[jsonLine]key(normalDamaged)type(Array)typeStr(string[])
        public string[] normalDamaged { get; set; }
[jsonLine]key(airborneDamaged)type(Array)typeStr(string[])
        public string[] airborneDamaged { get; set; }
[jsonLine]key(airbornePowerDownDamaged)type(Array)typeStr(string[])
        public string[] airbornePowerDownDamaged { get; set; }
[jsonLine]key(knockBackDamaged)type(Array)typeStr(string[])
        public string[] knockBackDamaged { get; set; }
[jsonLine]key(flyAwayDamaged)type(Array)typeStr(string[])
        public string[] flyAwayDamaged { get; set; }
[jsonLine]key(damagedAirborneLoop)type(Array)typeStr(string[])
        public string[] damagedAirborneLoop { get; set; }
[jsonLine]key(damagedLanding)type(Array)typeStr(string[])
        public string[] damagedLanding { get; set; }
[jsonLine]key(wakeUp)type(Array)typeStr(string[])
        public string[] wakeUp { get; set; }
[jsonLine]key(dead)type(Array)typeStr(string[])
        public string[] dead { get; set; }
[jsonLine]key(getItem)type(Array)typeStr(string[])
        public string[] getItem { get; set; }
[jsonLine]key(weekAttack1)type(Array)typeStr(string[])
        public string[] weekAttack1 { get; set; }
[jsonLine]key(weekAttack2)type(Array)typeStr(string[])
        public string[] weekAttack2 { get; set; }
[jsonLine]key(weekAttack3)type(Array)typeStr(string[])
        public string[] weekAttack3 { get; set; }
[jsonLine]key(airWeekAttack1)type(Array)typeStr(string[])
        public string[] airWeekAttack1 { get; set; }
[jsonLine]key(airWeekAttack2)type(Array)typeStr(string[])
        public string[] airWeekAttack2 { get; set; }
[jsonLine]key(airWeekAttack3)type(Array)typeStr(string[])
        public string[] airWeekAttack3 { get; set; }
[jsonLine]key(strongAttack1)type(Array)typeStr(string[])
        public string[] strongAttack1 { get; set; }
[jsonLine]key(strongAttack2)type(Array)typeStr(string[])
        public string[] strongAttack2 { get; set; }
length(185)
Assets\Scripts\DataClass\CharacterRoleStateTable_old.cs(12,18): error CS0101: The namespace 'DataClass' already contains a definition for 'CharacterRoleStateData'
Assets\Scripts\DataClass\CharacterRoleStateTable_old.cs(88,18): error CS0101: The namespace 'DataClass' already contains a definition for 'CharacterRoleStateTable'
Assets\ExternalRecourses\Travis Game Assets\Hit Impact Effects\Demo Scene\Scripts\HitImpactEffectsPreview.cs(28,21): warning CS0108: 'HitImpactEffectsPreview.light' hides inherited member 'Component.light'. Use the new keyword if hiding was intended.
Assets\Scripts\DataClass\CharacterRoleStateTable_old.cs(11,6): error CS0579: Duplicate 'Serializable' attribute
Assets\Scripts\DataClass\CharacterRoleStateTable_old.cs(98,33): error CS0111: Type 'CharacterRoleStateTable' already defines a member called 'Init' with the same parameter types
Assets\Scripts\DataClass\CharacterRoleStateTable_old.cs(127,46): error CS0111: Type 'CharacterRoleStateTable' already defines a member called 'GetData' with the same parameter types
Assets\Scripts\DataClass\CharacterRoleStateTable_old.cs(139,52): error CS0111: Type 'CharacterRoleStateTable' already defines a member called 'GetList' with the same parameter types
Assets\Scripts\DataClass\CharacterRoleStateTable_old.cs(157,28): error CS0111: Type 'CharacterRoleStateTable' already defines a member called 'SetData' with the same parameter types
Assets\Scripts\DataClass\CharacterRoleStateTable_old.cs(169,28): error CS0111: Type 'CharacterRoleStateTable' already defines a member called 'Export' with the same parameter types
Assets\Scripts\Utils\UIManagerTool.cs(63,36): warning CS0108: 'UIManagerTool.GetEventSystemRaycastResults()' hides inherited member 'UIManager.GetEventSystemRaycastResults()'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(72,21): warning CS0108: 'UIManagerTool.IsRaycastUI()' hides inherited member 'UIManager.IsRaycastUI()'. Use the new keyword if hiding was intended.
Assets\Scripts\DataClass\CharacterRoleStateTable_old.cs(14,16): error CS0111: Type 'CharacterRoleStateData' already defines a member called 'CharacterRoleStateData' with the same parameter types
Assets\Scripts\DataClass\CharacterRoleStateTable_old.cs(18,16): error CS0111: Type 'CharacterRoleStateData' already defines a member called 'CharacterRoleStateData' with the same parameter types
Assets\Scripts\DataClass\CharacterRoleStateTable_old.cs(80,32): error CS0111: Type 'CharacterRoleStateData' already defines a member called 'ToString' with the same parameter types
스크립트 컴파일이 완료되었습니다.
Assets\ExternalRecourses\Travis Game Assets\Hit Impact Effects\Demo Scene\Scripts\HitImpactEffectsPreview.cs(28,21): warning CS0108: 'HitImpactEffectsPreview.light' hides inherited member 'Component.light'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(63,36): warning CS0108: 'UIManagerTool.GetEventSystemRaycastResults()' hides inherited member 'UIManager.GetEventSystemRaycastResults()'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(72,21): warning CS0108: 'UIManagerTool.IsRaycastUI()' hides inherited member 'UIManager.IsRaycastUI()'. Use the new keyword if hiding was intended.
Assets\Scripts\Action\MoveSet.cs(139,26): warning CS0168: The variable 'e' is declared but never used
Assets\Scripts\DrawDebugCharacter.cs(46,21): warning CS0219: The variable 'pivot' is assigned but its value is never used
Assets\Scripts\UI\UIHudManager.cs(35,30): warning CS0168: The variable 'e' is declared but never used
Assets\Scripts\State\Damaged\KnockBackDamagedState.cs(8,18): warning CS0414: The field 'KnockBackDamagedState._knockBackTimeMilliSec' is assigned but its value is never used
Assets\Scripts\PartCollider.cs(5,43): warning CS0414: The field 'PartCollider._colliderType' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(45,23): warning CS0414: The field 'UIActionPlayerPage._pinStart' is assigned but its value is never used
Assets\Scripts\State\Npc\NpcJumpDownState.cs(6,19): warning CS0414: The field 'NpcJumpDownState._jumpTimer' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(42,40): warning CS0414: The field 'UIActionPlayerPage._startRate' is assigned but its value is never used
Assets\Scripts\SceneMain\SceneMoveSet.cs(10,21): warning CS0414: The field 'SceneMoveSet.testFrame' is assigned but its value is never used
Assets\Scripts\Character.cs(168,26): warning CS0414: The field 'Character._leftWallObjs' is assigned but its value is never used
Assets\Scripts\State\LandingState.cs(8,18): warning CS0414: The field 'LandingState._inputDelayMSec' is assigned but its value is never used
Assets\Scripts\Character.cs(170,26): warning CS0414: The field 'Character._frontWallObjs' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(43,40): warning CS0414: The field 'UIActionPlayerPage._endRate' is assigned but its value is never used
Assets\Scripts\Projectile\Projectile.cs(14,19): warning CS0414: The field 'Projectile._moveTween' is assigned but its value is never used
Assets\Scripts\State\Npc\NpcJumpUpState.cs(7,19): warning CS0414: The field 'NpcJumpUpState._jumpTimer' is assigned but its value is never used
Assets\Scripts\Utils\Input\InputManager.cs(50,17): warning CS0414: The field 'InputManager._holdMaxSize' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(46,23): warning CS0414: The field 'UIActionPlayerPage._pinEnd' is assigned but its value is never used
Assets\Scripts\Character.cs(160,18): warning CS0414: The field 'Character._checkGround' is assigned but its value is never used
Assets\Scripts\State\RunStopState.cs(6,19): warning CS0414: The field 'RunStopState._jumpTimer' is assigned but its value is never used
Assets\Scripts\AttackCollider.cs(19,41): warning CS0414: The field 'AttackCollider._colliderType' is assigned but its value is never used
Assets\Scripts\Character.cs(171,26): warning CS0414: The field 'Character._backWallObjs' is assigned but its value is never used
Assets\Scripts\Character.cs(169,26): warning CS0414: The field 'Character._rightWallObjs' is assigned but its value is never used
스크립트 컴파일이 완료되었습니다.
[test]CustomToolbar
[testumJson]Application.dataPath(C:/Users/user/Documents/Github/zxcvProject/Assets)
[executeFile]fileName(Action.json)tableName()
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[lineCheck]Construct(19/22)
_declareInfo(25/28)
_toStringInfo(31/33)
[jsonLine]key(id)type(Integer)typeStr(int)
        public int id { get; set; }
[jsonLine]key(actionName)type(String)typeStr(string)
        public string actionName { get; set; }
[jsonLine]key(roleState)type(String)typeStr(string)
        public string roleState { get; set; }
[jsonLine]key(actionType)type(String)typeStr(string)
        public string actionType { get; set; }
[jsonLine]key(clipPath)type(String)typeStr(string)
        public string clipPath { get; set; }
[jsonLine]key(speed)type(Float)typeStr(float)
        public float speed { get; set; }
[jsonLine]key(startTimeRatio)type(Float)typeStr(float)
        public float startTimeRatio { get; set; }
[jsonLine]key(endTimeRatio)type(Float)typeStr(float)
        public float endTimeRatio { get; set; }
[jsonLine]key(damageRatio)type(Float)typeStr(float)
        public float damageRatio { get; set; }
length(149)
[executeFile]fileName(AnimationFadeInfo.json)tableName()
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[lineCheck]Construct(19/22)
_declareInfo(25/28)
_toStringInfo(31/33)
[jsonLine]key(id)type(Integer)typeStr(int)
        public int id { get; set; }
[jsonLine]key(PlayerType)type(String)typeStr(string)
        public string PlayerType { get; set; }
[jsonLine]key(idleStart)type(Float)typeStr(float)
        public float idleStart { get; set; }
[jsonLine]key(walkStart)type(Float)typeStr(float)
        public float walkStart { get; set; }
[jsonLine]key(runStart)type(Float)typeStr(float)
        public float runStart { get; set; }
[jsonLine]key(jumpUpStart)type(Float)typeStr(float)
        public float jumpUpStart { get; set; }
[jsonLine]key(jumpEnd)type(Float)typeStr(float)
        public float jumpEnd { get; set; }
[jsonLine]key(damageLandingStart)type(Float)typeStr(float)
        public float damageLandingStart { get; set; }
length(147)
[executeFile]fileName(AttackInfo.json)tableName()
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[lineCheck]Construct(19/22)
_declareInfo(25/28)
_toStringInfo(31/33)
[jsonLine]key(id)type(Integer)typeStr(int)
        public int id { get; set; }
[jsonLine]key(stateName)type(String)typeStr(string)
        public string stateName { get; set; }
[jsonLine]key(hitboxType)type(String)typeStr(string)
        public string hitboxType { get; set; }
[jsonLine]key(damageRatio)type(Float)typeStr(float)
        public float damageRatio { get; set; }
[jsonLine]key(startRatio)type(Float)typeStr(float)
        public float startRatio { get; set; }
[jsonLine]key(endRatio)type(Float)typeStr(float)
        public float endRatio { get; set; }
[jsonLine]key(attackType)type(String)typeStr(string)
        public string attackType { get; set; }
[jsonLine]key(airborneHeight)type(Float)typeStr(float)
        public float airborneHeight { get; set; }
[jsonLine]key(airborneTime)type(Float)typeStr(float)
        public float airborneTime { get; set; }
length(149)
[executeFile]fileName(CharacterRoleProfile.json)tableName()
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[lineCheck]Construct(19/22)
_declareInfo(25/28)
_toStringInfo(31/33)
[jsonLine]key(id)type(Integer)typeStr(int)
        public int id { get; set; }
[jsonLine]key(name)type(String)typeStr(string)
        public string name { get; set; }
[jsonLine]key(roleStateProfile)type(String)typeStr(string)
        public string roleStateProfile { get; set; }
[jsonLine]key(statProfile)type(String)typeStr(string)
        public string statProfile { get; set; }
length(139)
[executeFile]fileName(CharacterRoleState.json)tableName()
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[lineCheck]Construct(19/22)
_declareInfo(25/28)
_toStringInfo(31/33)
[jsonLine]key(id)type(Integer)typeStr(int)
        public int id { get; set; }
[jsonLine]key(name)type(String)typeStr(string)
        public string name { get; set; }
[jsonLine]key(idle)type(Array)typeStr(string[])
        public string[] idle { get; set; }
[jsonLine]key(walk)type(Array)typeStr(string[])
        public string[] walk { get; set; }
[jsonLine]key(run)type(Array)typeStr(string[])
        public string[] run { get; set; }
[jsonLine]key(runStop)type(Array)typeStr(string[])
        public string[] runStop { get; set; }
[jsonLine]key(jumpUp)type(Array)typeStr(string[])
        public string[] jumpUp { get; set; }
[jsonLine]key(jumpDown)type(Array)typeStr(string[])
        public string[] jumpDown { get; set; }
[jsonLine]key(landing)type(Array)typeStr(string[])
        public string[] landing { get; set; }
[jsonLine]key(normalDamaged)type(Array)typeStr(string[])
        public string[] normalDamaged { get; set; }
[jsonLine]key(airborneDamaged)type(Array)typeStr(string[])
        public string[] airborneDamaged { get; set; }
[jsonLine]key(airbornePowerDownDamaged)type(Array)typeStr(string[])
        public string[] airbornePowerDownDamaged { get; set; }
[jsonLine]key(knockBackDamaged)type(Array)typeStr(string[])
        public string[] knockBackDamaged { get; set; }
[jsonLine]key(flyAwayDamaged)type(Array)typeStr(string[])
        public string[] flyAwayDamaged { get; set; }
[jsonLine]key(damagedAirborneLoop)type(Array)typeStr(string[])
        public string[] damagedAirborneLoop { get; set; }
[jsonLine]key(damagedLanding)type(Array)typeStr(string[])
        public string[] damagedLanding { get; set; }
[jsonLine]key(wakeUp)type(Array)typeStr(string[])
        public string[] wakeUp { get; set; }
[jsonLine]key(dead)type(Array)typeStr(string[])
        public string[] dead { get; set; }
[jsonLine]key(getItem)type(Array)typeStr(string[])
        public string[] getItem { get; set; }
[jsonLine]key(weekAttack1)type(Array)typeStr(string[])
        public string[] weekAttack1 { get; set; }
[jsonLine]key(weekAttack2)type(Array)typeStr(string[])
        public string[] weekAttack2 { get; set; }
[jsonLine]key(weekAttack3)type(Array)typeStr(string[])
        public string[] weekAttack3 { get; set; }
[jsonLine]key(airWeekAttack1)type(Array)typeStr(string[])
        public string[] airWeekAttack1 { get; set; }
[jsonLine]key(airWeekAttack2)type(Array)typeStr(string[])
        public string[] airWeekAttack2 { get; set; }
[jsonLine]key(airWeekAttack3)type(Array)typeStr(string[])
        public string[] airWeekAttack3 { get; set; }
[jsonLine]key(strongAttack1)type(Array)typeStr(string[])
        public string[] strongAttack1 { get; set; }
[jsonLine]key(strongAttack2)type(Array)typeStr(string[])
        public string[] strongAttack2 { get; set; }
length(185)
[executeFile]fileName(CharacterStat.json)tableName()
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[lineCheck]Construct(19/22)
_declareInfo(25/28)
_toStringInfo(31/33)
[jsonLine]key(id)type(Integer)typeStr(int)
        public int id { get; set; }
[jsonLine]key(profileName)type(String)typeStr(string)
        public string profileName { get; set; }
[jsonLine]key(health)type(Float)typeStr(float)
        public float health { get; set; }
[jsonLine]key(mana)type(Float)typeStr(float)
        public float mana { get; set; }
[jsonLine]key(strength)type(Float)typeStr(float)
        public float strength { get; set; }
[jsonLine]key(agility)type(Float)typeStr(float)
        public float agility { get; set; }
[jsonLine]key(intellect)type(Float)typeStr(float)
        public float intellect { get; set; }
[jsonLine]key(defense)type(Float)typeStr(float)
        public float defense { get; set; }
length(147)
Assets\Scripts\DataClass\ActionTable_old.cs(14,18): error CS0101: The namespace 'DataClass' already contains a definition for 'ActionData'
Assets\Scripts\DataClass\ActionTable_old.cs(48,18): error CS0101: The namespace 'DataClass' already contains a definition for 'ActionTable'
Assets\Scripts\DataClass\AnimationFadeInfoTable_old.cs(12,18): error CS0101: The namespace 'DataClass' already contains a definition for 'AnimationFadeInfoData'
Assets\Scripts\DataClass\AnimationFadeInfoTable_old.cs(44,18): error CS0101: The namespace 'DataClass' already contains a definition for 'AnimationFadeInfoTable'
Assets\Scripts\DataClass\AttackInfoTable_old.cs(12,18): error CS0101: The namespace 'DataClass' already contains a definition for 'AttackInfoData'
Assets\Scripts\DataClass\AttackInfoTable_old.cs(46,18): error CS0101: The namespace 'DataClass' already contains a definition for 'AttackInfoTable'
Assets\Scripts\DataClass\CharacterRoleStateTable_old.cs(12,18): error CS0101: The namespace 'DataClass' already contains a definition for 'CharacterRoleStateData'
Assets\Scripts\DataClass\CharacterRoleStateTable_old.cs(88,18): error CS0101: The namespace 'DataClass' already contains a definition for 'CharacterRoleStateTable'
Assets\Scripts\DataClass\CharacterStatTable_old.cs(12,18): error CS0101: The namespace 'DataClass' already contains a definition for 'CharacterStatData'
Assets\Scripts\DataClass\CharacterStatTable_old.cs(44,18): error CS0101: The namespace 'DataClass' already contains a definition for 'CharacterStatTable'
Assets\Scripts\DataClass\ActionTable_old.cs(13,6): error CS0579: Duplicate 'Serializable' attribute
Assets\ExternalRecourses\Travis Game Assets\Hit Impact Effects\Demo Scene\Scripts\HitImpactEffectsPreview.cs(28,21): warning CS0108: 'HitImpactEffectsPreview.light' hides inherited member 'Component.light'. Use the new keyword if hiding was intended.
Assets\Scripts\DataClass\AnimationFadeInfoTable_old.cs(11,6): error CS0579: Duplicate 'Serializable' attribute
Assets\Scripts\DataClass\AttackInfoTable_old.cs(11,6): error CS0579: Duplicate 'Serializable' attribute
Assets\Scripts\DataClass\CharacterRoleStateTable_old.cs(11,6): error CS0579: Duplicate 'Serializable' attribute
Assets\Scripts\DataClass\CharacterStatTable_old.cs(11,6): error CS0579: Duplicate 'Serializable' attribute
Assets\Scripts\Utils\UIManagerTool.cs(63,36): warning CS0108: 'UIManagerTool.GetEventSystemRaycastResults()' hides inherited member 'UIManager.GetEventSystemRaycastResults()'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(72,21): warning CS0108: 'UIManagerTool.IsRaycastUI()' hides inherited member 'UIManager.IsRaycastUI()'. Use the new keyword if hiding was intended.
Assets\Scripts\DataClass\ActionTable_old.cs(16,16): error CS0111: Type 'ActionData' already defines a member called 'ActionData' with the same parameter types
Assets\Scripts\DataClass\ActionTable_old.cs(20,16): error CS0111: Type 'ActionData' already defines a member called 'ActionData' with the same parameter types
Assets\Scripts\DataClass\ActionTable_old.cs(42,32): error CS0111: Type 'ActionData' already defines a member called 'ToString' with the same parameter types
Assets\Scripts\DataClass\AnimationFadeInfoTable_old.cs(14,16): error CS0111: Type 'AnimationFadeInfoData' already defines a member called 'AnimationFadeInfoData' with the same parameter types
Assets\Scripts\DataClass\AnimationFadeInfoTable_old.cs(18,16): error CS0111: Type 'AnimationFadeInfoData' already defines a member called 'AnimationFadeInfoData' with the same parameter types
Assets\Scripts\DataClass\AnimationFadeInfoTable_old.cs(38,32): error CS0111: Type 'AnimationFadeInfoData' already defines a member called 'ToString' with the same parameter types
Assets\Scripts\DataClass\AttackInfoTable_old.cs(14,16): error CS0111: Type 'AttackInfoData' already defines a member called 'AttackInfoData' with the same parameter types
Assets\Scripts\DataClass\AttackInfoTable_old.cs(18,16): error CS0111: Type 'AttackInfoData' already defines a member called 'AttackInfoData' with the same parameter types
Assets\Scripts\DataClass\AttackInfoTable_old.cs(40,32): error CS0111: Type 'AttackInfoData' already defines a member called 'ToString' with the same parameter types
Assets\Scripts\DataClass\ActionTable_old.cs(58,33): error CS0111: Type 'ActionTable' already defines a member called 'Init' with the same parameter types
Assets\Scripts\DataClass\ActionTable_old.cs(83,34): error CS0111: Type 'ActionTable' already defines a member called 'GetData' with the same parameter types
Assets\Scripts\DataClass\ActionTable_old.cs(95,40): error CS0111: Type 'ActionTable' already defines a member called 'GetList' with the same parameter types
Assets\Scripts\DataClass\ActionTable_old.cs(113,28): error CS0111: Type 'ActionTable' already defines a member called 'SetData' with the same parameter types
Assets\Scripts\DataClass\ActionTable_old.cs(125,28): error CS0111: Type 'ActionTable' already defines a member called 'Export' with the same parameter types
Assets\Scripts\DataClass\AnimationFadeInfoTable_old.cs(54,33): error CS0111: Type 'AnimationFadeInfoTable' already defines a member called 'Init' with the same parameter types
Assets\Scripts\DataClass\AnimationFadeInfoTable_old.cs(79,45): error CS0111: Type 'AnimationFadeInfoTable' already defines a member called 'GetData' with the same parameter types
Assets\Scripts\DataClass\AnimationFadeInfoTable_old.cs(91,51): error CS0111: Type 'AnimationFadeInfoTable' already defines a member called 'GetList' with the same parameter types
Assets\Scripts\DataClass\AnimationFadeInfoTable_old.cs(109,28): error CS0111: Type 'AnimationFadeInfoTable' already defines a member called 'SetData' with the same parameter types
Assets\Scripts\DataClass\AnimationFadeInfoTable_old.cs(121,28): error CS0111: Type 'AnimationFadeInfoTable' already defines a member called 'Export' with the same parameter types
Assets\Scripts\DataClass\AttackInfoTable_old.cs(56,33): error CS0111: Type 'AttackInfoTable' already defines a member called 'Init' with the same parameter types
Assets\Scripts\DataClass\AttackInfoTable_old.cs(81,38): error CS0111: Type 'AttackInfoTable' already defines a member called 'GetData' with the same parameter types
Assets\Scripts\DataClass\AttackInfoTable_old.cs(93,44): error CS0111: Type 'AttackInfoTable' already defines a member called 'GetList' with the same parameter types
Assets\Scripts\DataClass\AttackInfoTable_old.cs(111,28): error CS0111: Type 'AttackInfoTable' already defines a member called 'SetData' with the same parameter types
Assets\Scripts\DataClass\AttackInfoTable_old.cs(123,28): error CS0111: Type 'AttackInfoTable' already defines a member called 'Export' with the same parameter types
Assets\Scripts\DataClass\CharacterStatTable_old.cs(14,16): error CS0111: Type 'CharacterStatData' already defines a member called 'CharacterStatData' with the same parameter types
Assets\Scripts\DataClass\CharacterStatTable_old.cs(18,16): error CS0111: Type 'CharacterStatData' already defines a member called 'CharacterStatData' with the same parameter types
Assets\Scripts\DataClass\CharacterStatTable_old.cs(38,32): error CS0111: Type 'CharacterStatData' already defines a member called 'ToString' with the same parameter types
Assets\Scripts\DataClass\CharacterRoleStateTable_old.cs(98,33): error CS0111: Type 'CharacterRoleStateTable' already defines a member called 'Init' with the same parameter types
Assets\Scripts\DataClass\CharacterRoleStateTable_old.cs(127,46): error CS0111: Type 'CharacterRoleStateTable' already defines a member called 'GetData' with the same parameter types
Assets\Scripts\DataClass\CharacterRoleStateTable_old.cs(139,52): error CS0111: Type 'CharacterRoleStateTable' already defines a member called 'GetList' with the same parameter types
Assets\Scripts\DataClass\CharacterRoleStateTable_old.cs(157,28): error CS0111: Type 'CharacterRoleStateTable' already defines a member called 'SetData' with the same parameter types
Assets\Scripts\DataClass\CharacterRoleStateTable_old.cs(169,28): error CS0111: Type 'CharacterRoleStateTable' already defines a member called 'Export' with the same parameter types
Assets\Scripts\DataClass\CharacterStatTable_old.cs(54,33): error CS0111: Type 'CharacterStatTable' already defines a member called 'Init' with the same parameter types
Assets\Scripts\DataClass\CharacterStatTable_old.cs(79,41): error CS0111: Type 'CharacterStatTable' already defines a member called 'GetData' with the same parameter types
Assets\Scripts\DataClass\CharacterStatTable_old.cs(91,47): error CS0111: Type 'CharacterStatTable' already defines a member called 'GetList' with the same parameter types
Assets\Scripts\DataClass\CharacterStatTable_old.cs(109,28): error CS0111: Type 'CharacterStatTable' already defines a member called 'SetData' with the same parameter types
Assets\Scripts\DataClass\CharacterStatTable_old.cs(121,28): error CS0111: Type 'CharacterStatTable' already defines a member called 'Export' with the same parameter types
Assets\Scripts\DataClass\CharacterRoleStateTable_old.cs(14,16): error CS0111: Type 'CharacterRoleStateData' already defines a member called 'CharacterRoleStateData' with the same parameter types
Assets\Scripts\DataClass\CharacterRoleStateTable_old.cs(18,16): error CS0111: Type 'CharacterRoleStateData' already defines a member called 'CharacterRoleStateData' with the same parameter types
Assets\Scripts\DataClass\CharacterRoleStateTable_old.cs(80,32): error CS0111: Type 'CharacterRoleStateData' already defines a member called 'ToString' with the same parameter types
A meta data file (.meta) exists but its asset 'Assets/Scripts/DataClass/ActionTable_old.cs' can't be found. When moving or deleting files outside of Unity, please ensure that the corresponding .meta file is moved or deleted along with it.
A meta data file (.meta) exists but its asset 'Assets/Scripts/DataClass/AnimationFadeInfoTable_old.cs' can't be found. When moving or deleting files outside of Unity, please ensure that the corresponding .meta file is moved or deleted along with it.
A meta data file (.meta) exists but its asset 'Assets/Scripts/DataClass/AttackInfoTable_old.cs' can't be found. When moving or deleting files outside of Unity, please ensure that the corresponding .meta file is moved or deleted along with it.
A meta data file (.meta) exists but its asset 'Assets/Scripts/DataClass/CharacterRoleStateTable_old.cs' can't be found. When moving or deleting files outside of Unity, please ensure that the corresponding .meta file is moved or deleted along with it.
A meta data file (.meta) exists but its asset 'Assets/Scripts/DataClass/CharacterStatTable_old.cs' can't be found. When moving or deleting files outside of Unity, please ensure that the corresponding .meta file is moved or deleted along with it.
스크립트 컴파일이 완료되었습니다.
Assets\ExternalRecourses\Travis Game Assets\Hit Impact Effects\Demo Scene\Scripts\HitImpactEffectsPreview.cs(28,21): warning CS0108: 'HitImpactEffectsPreview.light' hides inherited member 'Component.light'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(63,36): warning CS0108: 'UIManagerTool.GetEventSystemRaycastResults()' hides inherited member 'UIManager.GetEventSystemRaycastResults()'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(72,21): warning CS0108: 'UIManagerTool.IsRaycastUI()' hides inherited member 'UIManager.IsRaycastUI()'. Use the new keyword if hiding was intended.
Assets\Scripts\DrawDebugCharacter.cs(46,21): warning CS0219: The variable 'pivot' is assigned but its value is never used
Assets\Scripts\Action\MoveSet.cs(139,26): warning CS0168: The variable 'e' is declared but never used
Assets\Scripts\UI\UIHudManager.cs(35,30): warning CS0168: The variable 'e' is declared but never used
Assets\Scripts\DataClass\AttackInfoTable.cs(81,57): error CS1061: 'AttackInfoData' does not contain a definition for 'name' and no accessible extension method 'name' accepting a first argument of type 'AttackInfoData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\DataClass\AttackInfoTable.cs(83,73): error CS1061: 'AttackInfoData' does not contain a definition for 'name' and no accessible extension method 'name' accepting a first argument of type 'AttackInfoData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\DataClass\AttackInfoTable.cs(86,45): error CS1061: 'AttackInfoData' does not contain a definition for 'name' and no accessible extension method 'name' accepting a first argument of type 'AttackInfoData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\DataClass\CharacterStatTable.cs(79,57): error CS1061: 'CharacterStatData' does not contain a definition for 'name' and no accessible extension method 'name' accepting a first argument of type 'CharacterStatData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\DataClass\CharacterStatTable.cs(81,73): error CS1061: 'CharacterStatData' does not contain a definition for 'name' and no accessible extension method 'name' accepting a first argument of type 'CharacterStatData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\DataClass\CharacterStatTable.cs(84,45): error CS1061: 'CharacterStatData' does not contain a definition for 'name' and no accessible extension method 'name' accepting a first argument of type 'CharacterStatData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\DataClass\ActionTable.cs(81,57): error CS1061: 'ActionData' does not contain a definition for 'name' and no accessible extension method 'name' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\DataClass\ActionTable.cs(83,73): error CS1061: 'ActionData' does not contain a definition for 'name' and no accessible extension method 'name' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\DataClass\ActionTable.cs(86,45): error CS1061: 'ActionData' does not contain a definition for 'name' and no accessible extension method 'name' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\DataClass\AnimationFadeInfoTable.cs(79,57): error CS1061: 'AnimationFadeInfoData' does not contain a definition for 'name' and no accessible extension method 'name' accepting a first argument of type 'AnimationFadeInfoData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\DataClass\AnimationFadeInfoTable.cs(81,73): error CS1061: 'AnimationFadeInfoData' does not contain a definition for 'name' and no accessible extension method 'name' accepting a first argument of type 'AnimationFadeInfoData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\DataClass\AnimationFadeInfoTable.cs(84,45): error CS1061: 'AnimationFadeInfoData' does not contain a definition for 'name' and no accessible extension method 'name' accepting a first argument of type 'AnimationFadeInfoData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\State\RunStopState.cs(6,19): warning CS0414: The field 'RunStopState._jumpTimer' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(46,23): warning CS0414: The field 'UIActionPlayerPage._pinEnd' is assigned but its value is never used
Assets\Scripts\State\LandingState.cs(8,18): warning CS0414: The field 'LandingState._inputDelayMSec' is assigned but its value is never used
Assets\Scripts\State\Npc\NpcJumpDownState.cs(6,19): warning CS0414: The field 'NpcJumpDownState._jumpTimer' is assigned but its value is never used
Assets\Scripts\AttackCollider.cs(19,41): warning CS0414: The field 'AttackCollider._colliderType' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(45,23): warning CS0414: The field 'UIActionPlayerPage._pinStart' is assigned but its value is never used
Assets\Scripts\Character.cs(170,26): warning CS0414: The field 'Character._frontWallObjs' is assigned but its value is never used
Assets\Scripts\Utils\Input\InputManager.cs(50,17): warning CS0414: The field 'InputManager._holdMaxSize' is assigned but its value is never used
Assets\Scripts\SceneMain\SceneMoveSet.cs(10,21): warning CS0414: The field 'SceneMoveSet.testFrame' is assigned but its value is never used
Assets\Scripts\State\Npc\NpcJumpUpState.cs(7,19): warning CS0414: The field 'NpcJumpUpState._jumpTimer' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(42,40): warning CS0414: The field 'UIActionPlayerPage._startRate' is assigned but its value is never used
Assets\Scripts\PartCollider.cs(5,43): warning CS0414: The field 'PartCollider._colliderType' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(43,40): warning CS0414: The field 'UIActionPlayerPage._endRate' is assigned but its value is never used
Assets\Scripts\Character.cs(160,18): warning CS0414: The field 'Character._checkGround' is assigned but its value is never used
Assets\Scripts\Projectile\Projectile.cs(14,19): warning CS0414: The field 'Projectile._moveTween' is assigned but its value is never used
Assets\Scripts\Character.cs(171,26): warning CS0414: The field 'Character._backWallObjs' is assigned but its value is never used
Assets\Scripts\Character.cs(169,26): warning CS0414: The field 'Character._rightWallObjs' is assigned but its value is never used
Assets\Scripts\Character.cs(168,26): warning CS0414: The field 'Character._leftWallObjs' is assigned but its value is never used
Assets\Scripts\State\Damaged\KnockBackDamagedState.cs(8,18): warning CS0414: The field 'KnockBackDamagedState._knockBackTimeMilliSec' is assigned but its value is never used
스크립트 컴파일이 완료되었습니다.
Assets\Scripts\Action\HitboxInfo.cs(15,23): error CS0246: The type or namespace name 'AttackInfoData' could not be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\MoveSetCharacter.cs(18,30): error CS0246: The type or namespace name 'ActionData' could not be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\Action\MoveSet.cs(172,35): error CS0246: The type or namespace name 'AttackInfoData' could not be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\State\State.cs(9,15): error CS0246: The type or namespace name 'AttackInfoData' could not be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\MoveSetCharacter.cs(71,26): error CS0246: The type or namespace name 'ActionData' could not be found (are you missing a using directive or an assembly reference?)
Assets\ExternalRecourses\Travis Game Assets\Hit Impact Effects\Demo Scene\Scripts\HitImpactEffectsPreview.cs(28,21): warning CS0108: 'HitImpactEffectsPreview.light' hides inherited member 'Component.light'. Use the new keyword if hiding was intended.
Assets\Scripts\Projectile\Projectile.cs(34,31): error CS0246: The type or namespace name 'AttackInfoData' could not be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\Action\Action.cs(23,31): error CS0246: The type or namespace name 'ActionData' could not be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\Utils\GameManager.cs(37,35): error CS0246: The type or namespace name 'AttackInfoData' could not be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\Action\Action.cs(9,13): error CS0246: The type or namespace name 'ActionData' could not be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\UI\UIActionPlayerPage.cs(47,36): error CS0246: The type or namespace name 'ActionData' could not be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\AttackCollider.cs(33,31): error CS0246: The type or namespace name 'AttackInfoData' could not be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\AttackCollider.cs(38,12): error CS0246: The type or namespace name 'AttackInfoData' could not be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\AttackCollider.cs(21,13): error CS0246: The type or namespace name 'AttackInfoData' could not be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\Utils\UIManagerTool.cs(63,36): warning CS0108: 'UIManagerTool.GetEventSystemRaycastResults()' hides inherited member 'UIManager.GetEventSystemRaycastResults()'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(72,21): warning CS0108: 'UIManagerTool.IsRaycastUI()' hides inherited member 'UIManager.IsRaycastUI()'. Use the new keyword if hiding was intended.
Assets\Scripts\Character.cs(1026,76): error CS0246: The type or namespace name 'AttackInfoData' could not be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\Character.cs(1112,12): error CS0246: The type or namespace name 'CharacterStatData' could not be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\Character.cs(1120,12): error CS0246: The type or namespace name 'AnimationFadeInfoData' could not be found (are you missing a using directive or an assembly reference?)
CustomToolbarManager must be instantiated using the ScriptableObject.CreateInstance method instead of new CustomToolbarManager.
스크립트 컴파일이 완료되었습니다.
[test]CustomToolbar
[testumJson]Application.dataPath(C:/Users/user/Documents/Github/zxcvProject/Assets)
[executeFile]fileName(Action.json)tableName()
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[lineCheck]Construct(19/22)
_declareInfo(25/28)
_toStringInfo(31/33)
[jsonLine]key(id)type(Integer)typeStr(int)
        public int id { get; set; }
[jsonLine]key(name)type(String)typeStr(string)
        public string name { get; set; }
[jsonLine]key(roleState)type(String)typeStr(string)
        public string roleState { get; set; }
[jsonLine]key(actionType)type(String)typeStr(string)
        public string actionType { get; set; }
[jsonLine]key(clipPath)type(String)typeStr(string)
        public string clipPath { get; set; }
[jsonLine]key(speed)type(Float)typeStr(float)
        public float speed { get; set; }
[jsonLine]key(startTimeRatio)type(Float)typeStr(float)
        public float startTimeRatio { get; set; }
[jsonLine]key(endTimeRatio)type(Float)typeStr(float)
        public float endTimeRatio { get; set; }
[jsonLine]key(damageRatio)type(Float)typeStr(float)
        public float damageRatio { get; set; }
length(149)
[executeFile]fileName(AnimationFadeInfo.json)tableName()
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[lineCheck]Construct(19/22)
_declareInfo(25/28)
_toStringInfo(31/33)
[jsonLine]key(id)type(Integer)typeStr(int)
        public int id { get; set; }
[jsonLine]key(name)type(String)typeStr(string)
        public string name { get; set; }
[jsonLine]key(idleStart)type(Float)typeStr(float)
        public float idleStart { get; set; }
[jsonLine]key(walkStart)type(Float)typeStr(float)
        public float walkStart { get; set; }
[jsonLine]key(runStart)type(Float)typeStr(float)
        public float runStart { get; set; }
[jsonLine]key(jumpUpStart)type(Float)typeStr(float)
        public float jumpUpStart { get; set; }
[jsonLine]key(jumpEnd)type(Float)typeStr(float)
        public float jumpEnd { get; set; }
[jsonLine]key(damageLandingStart)type(Float)typeStr(float)
        public float damageLandingStart { get; set; }
length(147)
[executeFile]fileName(AttackInfo.json)tableName()
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[lineCheck]Construct(19/22)
_declareInfo(25/28)
_toStringInfo(31/33)
[jsonLine]key(id)type(Integer)typeStr(int)
        public int id { get; set; }
[jsonLine]key(name)type(String)typeStr(string)
        public string name { get; set; }
[jsonLine]key(hitboxType)type(String)typeStr(string)
        public string hitboxType { get; set; }
[jsonLine]key(damageRatio)type(Float)typeStr(float)
        public float damageRatio { get; set; }
[jsonLine]key(startRatio)type(Float)typeStr(float)
        public float startRatio { get; set; }
[jsonLine]key(endRatio)type(Float)typeStr(float)
        public float endRatio { get; set; }
[jsonLine]key(attackType)type(String)typeStr(string)
        public string attackType { get; set; }
[jsonLine]key(airborneHeight)type(Float)typeStr(float)
        public float airborneHeight { get; set; }
[jsonLine]key(airborneTime)type(Float)typeStr(float)
        public float airborneTime { get; set; }
length(149)
[executeFile]fileName(CharacterRoleProfile.json)tableName()
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[lineCheck]Construct(19/22)
_declareInfo(25/28)
_toStringInfo(31/33)
[jsonLine]key(id)type(Integer)typeStr(int)
        public int id { get; set; }
[jsonLine]key(name)type(String)typeStr(string)
        public string name { get; set; }
[jsonLine]key(roleStateProfile)type(String)typeStr(string)
        public string roleStateProfile { get; set; }
[jsonLine]key(statProfile)type(String)typeStr(string)
        public string statProfile { get; set; }
length(139)
[executeFile]fileName(CharacterRoleState.json)tableName()
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[lineCheck]Construct(19/22)
_declareInfo(25/28)
_toStringInfo(31/33)
[jsonLine]key(id)type(Integer)typeStr(int)
        public int id { get; set; }
[jsonLine]key(name)type(String)typeStr(string)
        public string name { get; set; }
[jsonLine]key(idle)type(Array)typeStr(string[])
        public string[] idle { get; set; }
[jsonLine]key(walk)type(Array)typeStr(string[])
        public string[] walk { get; set; }
[jsonLine]key(run)type(Array)typeStr(string[])
        public string[] run { get; set; }
[jsonLine]key(runStop)type(Array)typeStr(string[])
        public string[] runStop { get; set; }
[jsonLine]key(jumpUp)type(Array)typeStr(string[])
        public string[] jumpUp { get; set; }
[jsonLine]key(jumpDown)type(Array)typeStr(string[])
        public string[] jumpDown { get; set; }
[jsonLine]key(landing)type(Array)typeStr(string[])
        public string[] landing { get; set; }
[jsonLine]key(normalDamaged)type(Array)typeStr(string[])
        public string[] normalDamaged { get; set; }
[jsonLine]key(airborneDamaged)type(Array)typeStr(string[])
        public string[] airborneDamaged { get; set; }
[jsonLine]key(airbornePowerDownDamaged)type(Array)typeStr(string[])
        public string[] airbornePowerDownDamaged { get; set; }
[jsonLine]key(knockBackDamaged)type(Array)typeStr(string[])
        public string[] knockBackDamaged { get; set; }
[jsonLine]key(flyAwayDamaged)type(Array)typeStr(string[])
        public string[] flyAwayDamaged { get; set; }
[jsonLine]key(damagedAirborneLoop)type(Array)typeStr(string[])
        public string[] damagedAirborneLoop { get; set; }
[jsonLine]key(damagedLanding)type(Array)typeStr(string[])
        public string[] damagedLanding { get; set; }
[jsonLine]key(wakeUp)type(Array)typeStr(string[])
        public string[] wakeUp { get; set; }
[jsonLine]key(dead)type(Array)typeStr(string[])
        public string[] dead { get; set; }
[jsonLine]key(getItem)type(Array)typeStr(string[])
        public string[] getItem { get; set; }
[jsonLine]key(weekAttack1)type(Array)typeStr(string[])
        public string[] weekAttack1 { get; set; }
[jsonLine]key(weekAttack2)type(Array)typeStr(string[])
        public string[] weekAttack2 { get; set; }
[jsonLine]key(weekAttack3)type(Array)typeStr(string[])
        public string[] weekAttack3 { get; set; }
[jsonLine]key(airWeekAttack1)type(Array)typeStr(string[])
        public string[] airWeekAttack1 { get; set; }
[jsonLine]key(airWeekAttack2)type(Array)typeStr(string[])
        public string[] airWeekAttack2 { get; set; }
[jsonLine]key(airWeekAttack3)type(Array)typeStr(string[])
        public string[] airWeekAttack3 { get; set; }
[jsonLine]key(strongAttack1)type(Array)typeStr(string[])
        public string[] strongAttack1 { get; set; }
[jsonLine]key(strongAttack2)type(Array)typeStr(string[])
        public string[] strongAttack2 { get; set; }
length(185)
[executeFile]fileName(CharacterStat.json)tableName()
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[lineCheck]Construct(19/22)
_declareInfo(25/28)
_toStringInfo(31/33)
[jsonLine]key(id)type(Integer)typeStr(int)
        public int id { get; set; }
[jsonLine]key(name)type(String)typeStr(string)
        public string name { get; set; }
[jsonLine]key(health)type(Float)typeStr(float)
        public float health { get; set; }
[jsonLine]key(mana)type(Float)typeStr(float)
        public float mana { get; set; }
[jsonLine]key(strength)type(Float)typeStr(float)
        public float strength { get; set; }
[jsonLine]key(agility)type(Float)typeStr(float)
        public float agility { get; set; }
[jsonLine]key(intellect)type(Float)typeStr(float)
        public float intellect { get; set; }
[jsonLine]key(defense)type(Float)typeStr(float)
        public float defense { get; set; }
length(147)
Assets\ExternalRecourses\Travis Game Assets\Hit Impact Effects\Demo Scene\Scripts\HitImpactEffectsPreview.cs(28,21): warning CS0108: 'HitImpactEffectsPreview.light' hides inherited member 'Component.light'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(63,36): warning CS0108: 'UIManagerTool.GetEventSystemRaycastResults()' hides inherited member 'UIManager.GetEventSystemRaycastResults()'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(72,21): warning CS0108: 'UIManagerTool.IsRaycastUI()' hides inherited member 'UIManager.IsRaycastUI()'. Use the new keyword if hiding was intended.
Assets\Scripts\Action\Action.cs(68,28): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\MoveSetCharacter.cs(20,41): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\DrawDebugCharacter.cs(46,21): warning CS0219: The variable 'pivot' is assigned but its value is never used
Assets\Scripts\Action\MoveSet.cs(139,26): warning CS0168: The variable 'e' is declared but never used
Assets\Scripts\UI\UIHudManager.cs(35,30): warning CS0168: The variable 'e' is declared but never used
Assets\Scripts\Utils\GameManager.cs(126,67): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\Utils\GameManager.cs(127,48): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\UI\UIActionPlayerPage.cs(139,32): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\UI\UIActionPlayerPage.cs(141,41): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\UI\UIActionPlayerPage.cs(143,56): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\UI\UIActionPlayerPage.cs(144,63): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\UI\UIActionPlayerPage.cs(146,88): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\UI\UIActionPlayerPage.cs(152,43): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\UI\UIActionPlayerPage.cs(153,51): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\UI\UIActionPlayerPage.cs(158,60): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\UI\UIActionPlayerPage.cs(162,52): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\UI\UIActionPlayerPage.cs(167,77): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\AttackCollider.cs(19,41): warning CS0414: The field 'AttackCollider._colliderType' is assigned but its value is never used
Assets\Scripts\Character.cs(171,26): warning CS0414: The field 'Character._backWallObjs' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(43,40): warning CS0414: The field 'UIActionPlayerPage._endRate' is assigned but its value is never used
Assets\Scripts\Character.cs(170,26): warning CS0414: The field 'Character._frontWallObjs' is assigned but its value is never used
Assets\Scripts\PartCollider.cs(5,43): warning CS0414: The field 'PartCollider._colliderType' is assigned but its value is never used
Assets\Scripts\State\LandingState.cs(8,18): warning CS0414: The field 'LandingState._inputDelayMSec' is assigned but its value is never used
Assets\Scripts\Character.cs(160,18): warning CS0414: The field 'Character._checkGround' is assigned but its value is never used
Assets\Scripts\State\Npc\NpcJumpDownState.cs(6,19): warning CS0414: The field 'NpcJumpDownState._jumpTimer' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(46,23): warning CS0414: The field 'UIActionPlayerPage._pinEnd' is assigned but its value is never used
Assets\Scripts\Character.cs(168,26): warning CS0414: The field 'Character._leftWallObjs' is assigned but its value is never used
Assets\Scripts\State\Damaged\KnockBackDamagedState.cs(8,18): warning CS0414: The field 'KnockBackDamagedState._knockBackTimeMilliSec' is assigned but its value is never used
Assets\Scripts\Utils\Input\InputManager.cs(50,17): warning CS0414: The field 'InputManager._holdMaxSize' is assigned but its value is never used
Assets\Scripts\Projectile\Projectile.cs(14,19): warning CS0414: The field 'Projectile._moveTween' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(42,40): warning CS0414: The field 'UIActionPlayerPage._startRate' is assigned but its value is never used
Assets\Scripts\SceneMain\SceneMoveSet.cs(10,21): warning CS0414: The field 'SceneMoveSet.testFrame' is assigned but its value is never used
Assets\Scripts\State\Npc\NpcJumpUpState.cs(7,19): warning CS0414: The field 'NpcJumpUpState._jumpTimer' is assigned but its value is never used
Assets\Scripts\Character.cs(169,26): warning CS0414: The field 'Character._rightWallObjs' is assigned but its value is never used
Assets\Scripts\State\RunStopState.cs(6,19): warning CS0414: The field 'RunStopState._jumpTimer' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(45,23): warning CS0414: The field 'UIActionPlayerPage._pinStart' is assigned but its value is never used
CustomToolbarManager must be instantiated using the ScriptableObject.CreateInstance method instead of new CustomToolbarManager.
스크립트 컴파일이 완료되었습니다.
[test]CustomToolbar
[testumJson]Application.dataPath(C:/Users/user/Documents/Github/zxcvProject/Assets)
[executeFile]fileName(Action.json)tableName()
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[lineCheck]Construct(19/22)
_declareInfo(25/28)
_toStringInfo(31/33)
[jsonLine]key(id)type(Integer)typeStr(int)
        public int id { get; set; }
[jsonLine]key(name)type(String)typeStr(string)
        public string name { get; set; }
[jsonLine]key(roleState)type(String)typeStr(string)
        public string roleState { get; set; }
[jsonLine]key(actionType)type(String)typeStr(string)
        public string actionType { get; set; }
[jsonLine]key(clipPath)type(String)typeStr(string)
        public string clipPath { get; set; }
[jsonLine]key(speed)type(Float)typeStr(float)
        public float speed { get; set; }
[jsonLine]key(startTimeRatio)type(Float)typeStr(float)
        public float startTimeRatio { get; set; }
[jsonLine]key(endTimeRatio)type(Float)typeStr(float)
        public float endTimeRatio { get; set; }
[jsonLine]key(damageRatio)type(Float)typeStr(float)
        public float damageRatio { get; set; }
length(149)
[executeFile]fileName(AnimationFadeInfo.json)tableName()
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[lineCheck]Construct(19/22)
_declareInfo(25/28)
_toStringInfo(31/33)
[jsonLine]key(id)type(Integer)typeStr(int)
        public int id { get; set; }
[jsonLine]key(name)type(String)typeStr(string)
        public string name { get; set; }
[jsonLine]key(idleStart)type(Float)typeStr(float)
        public float idleStart { get; set; }
[jsonLine]key(walkStart)type(Float)typeStr(float)
        public float walkStart { get; set; }
[jsonLine]key(runStart)type(Float)typeStr(float)
        public float runStart { get; set; }
[jsonLine]key(jumpUpStart)type(Float)typeStr(float)
        public float jumpUpStart { get; set; }
[jsonLine]key(jumpEnd)type(Float)typeStr(float)
        public float jumpEnd { get; set; }
[jsonLine]key(damageLandingStart)type(Float)typeStr(float)
        public float damageLandingStart { get; set; }
length(147)
[executeFile]fileName(AttackInfo.json)tableName()
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[lineCheck]Construct(19/22)
_declareInfo(25/28)
_toStringInfo(31/33)
[jsonLine]key(id)type(Integer)typeStr(int)
        public int id { get; set; }
[jsonLine]key(name)type(String)typeStr(string)
        public string name { get; set; }
[jsonLine]key(hitboxType)type(String)typeStr(string)
        public string hitboxType { get; set; }
[jsonLine]key(damageRatio)type(Float)typeStr(float)
        public float damageRatio { get; set; }
[jsonLine]key(startRatio)type(Float)typeStr(float)
        public float startRatio { get; set; }
[jsonLine]key(endRatio)type(Float)typeStr(float)
        public float endRatio { get; set; }
[jsonLine]key(attackType)type(String)typeStr(string)
        public string attackType { get; set; }
[jsonLine]key(airborneHeight)type(Float)typeStr(float)
        public float airborneHeight { get; set; }
[jsonLine]key(airborneTime)type(Float)typeStr(float)
        public float airborneTime { get; set; }
length(149)
[executeFile]fileName(CharacterRoleProfile.json)tableName()
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[lineCheck]Construct(19/22)
_declareInfo(25/28)
_toStringInfo(31/33)
[jsonLine]key(id)type(Integer)typeStr(int)
        public int id { get; set; }
[jsonLine]key(name)type(String)typeStr(string)
        public string name { get; set; }
[jsonLine]key(roleStateProfile)type(String)typeStr(string)
        public string roleStateProfile { get; set; }
[jsonLine]key(statProfile)type(String)typeStr(string)
        public string statProfile { get; set; }
length(139)
[executeFile]fileName(CharacterRoleState.json)tableName()
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[lineCheck]Construct(19/22)
_declareInfo(25/28)
_toStringInfo(31/33)
[jsonLine]key(id)type(Integer)typeStr(int)
        public int id { get; set; }
[jsonLine]key(name)type(String)typeStr(string)
        public string name { get; set; }
[jsonLine]key(idle)type(Array)typeStr(string[])
        public string[] idle { get; set; }
[jsonLine]key(walk)type(Array)typeStr(string[])
        public string[] walk { get; set; }
[jsonLine]key(run)type(Array)typeStr(string[])
        public string[] run { get; set; }
[jsonLine]key(runStop)type(Array)typeStr(string[])
        public string[] runStop { get; set; }
[jsonLine]key(jumpUp)type(Array)typeStr(string[])
        public string[] jumpUp { get; set; }
[jsonLine]key(jumpDown)type(Array)typeStr(string[])
        public string[] jumpDown { get; set; }
[jsonLine]key(landing)type(Array)typeStr(string[])
        public string[] landing { get; set; }
[jsonLine]key(normalDamaged)type(Array)typeStr(string[])
        public string[] normalDamaged { get; set; }
[jsonLine]key(airborneDamaged)type(Array)typeStr(string[])
        public string[] airborneDamaged { get; set; }
[jsonLine]key(airbornePowerDownDamaged)type(Array)typeStr(string[])
        public string[] airbornePowerDownDamaged { get; set; }
[jsonLine]key(knockBackDamaged)type(Array)typeStr(string[])
        public string[] knockBackDamaged { get; set; }
[jsonLine]key(flyAwayDamaged)type(Array)typeStr(string[])
        public string[] flyAwayDamaged { get; set; }
[jsonLine]key(damagedAirborneLoop)type(Array)typeStr(string[])
        public string[] damagedAirborneLoop { get; set; }
[jsonLine]key(damagedLanding)type(Array)typeStr(string[])
        public string[] damagedLanding { get; set; }
[jsonLine]key(wakeUp)type(Array)typeStr(string[])
        public string[] wakeUp { get; set; }
[jsonLine]key(dead)type(Array)typeStr(string[])
        public string[] dead { get; set; }
[jsonLine]key(getItem)type(Array)typeStr(string[])
        public string[] getItem { get; set; }
[jsonLine]key(weekAttack1)type(Array)typeStr(string[])
        public string[] weekAttack1 { get; set; }
[jsonLine]key(weekAttack2)type(Array)typeStr(string[])
        public string[] weekAttack2 { get; set; }
[jsonLine]key(weekAttack3)type(Array)typeStr(string[])
        public string[] weekAttack3 { get; set; }
[jsonLine]key(airWeekAttack1)type(Array)typeStr(string[])
        public string[] airWeekAttack1 { get; set; }
[jsonLine]key(airWeekAttack2)type(Array)typeStr(string[])
        public string[] airWeekAttack2 { get; set; }
[jsonLine]key(airWeekAttack3)type(Array)typeStr(string[])
        public string[] airWeekAttack3 { get; set; }
[jsonLine]key(strongAttack1)type(Array)typeStr(string[])
        public string[] strongAttack1 { get; set; }
[jsonLine]key(strongAttack2)type(Array)typeStr(string[])
        public string[] strongAttack2 { get; set; }
length(185)
[executeFile]fileName(CharacterStat.json)tableName()
[codeLine]using System;
[codeLine]using System.Collections.Generic;
[codeLine]using System.IO;
[codeLine]using Newtonsoft.Json;
[codeLine]using Newtonsoft.Json.Linq;
[codeLine]using UnityEngine;
[codeLine]using Utils;
[codeLine]
[codeLine]namespace DataClass
[codeLine]{
[codeLine]    [Serializable]
[codeLine]    public class _Sample_Data
[codeLine]    {
[codeLine]        public _Sample_Data()
[codeLine]        {
[codeLine]            
[codeLine]        }
[codeLine]        public _Sample_Data(_Sample_Data argData)
[codeLine]        {
[codeLine]            // Construct Values[Start]
[codeLine]            id = argData.id;
[codeLine]            name = argData.name;
[codeLine]            // Construct Values[End]
[codeLine]        }
[codeLine]
[codeLine]        // Declaration Values[Start]
[codeLine]        public int id { get; set; }
[codeLine]        public string name { get; set; }
[codeLine]        // Declaration Values[End]
[codeLine]        public override string ToString()
[codeLine]        {
[codeLine]            // ToString Values[Start]
[codeLine]            return $"id({id})name({name})";
[codeLine]            // ToString Values[End]
[codeLine]        }
[codeLine]    }
[codeLine]
[codeLine]    public class _Sample_Table : DataTable
[codeLine]    {
[codeLine]        private static Type tableType = typeof(_Sample_Table);
[codeLine]        private static string dataName = $"{typeof(_Sample_Data)}";
[codeLine]        private static string jsonFileName = "_Sample_.json";
[codeLine]        private static _Sample_Table _instance = null;
[codeLine]        
[codeLine]        // 런타임 사용 시 값 복사 꼭 고려할 것(id리스트, name리스트 모두)
[codeLine]        public Dictionary<int, _Sample_Data> IndexDictionary = new();
[codeLine]        public Dictionary<string, _Sample_Data> nameDictionary = new();
[codeLine]        protected override void Init(JArray dataList)
[codeLine]        {
[codeLine]            base.Init(dataList);
[codeLine]            _instance = this;
[codeLine]            foreach (var jToken in dataList)
[codeLine]            {
[codeLine]                var jsonData = JsonConvert.DeserializeObject<_Sample_Data>(jToken.ToString());
[codeLine]                if (enableLog)
[codeLine]                    Debug.Log($"[testumJsonTable][{tableType}]override.SaveData save obj data({jsonData})");
[codeLine]                // Id Dictionary Values[Start]
[codeLine]                if (IndexDictionary.ContainsKey(jsonData.id))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same id({jsonData.id})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                IndexDictionary.Add(jsonData.id, jsonData);
[codeLine]                // Id Dictionary Values[End]
[codeLine]                
[codeLine]                // name Dictionary Values[Start]
[codeLine]                if (nameDictionary.ContainsKey(jsonData.name))
[codeLine]                {
[codeLine]                    Debug.LogError($"{dataName} have same key({jsonData.name})");
[codeLine]                    continue;
[codeLine]                }
[codeLine]                nameDictionary.Add(jsonData.name, jsonData);
[codeLine]                // name Dictionary Values[End]
[codeLine]            }
[codeLine]        }
[codeLine]
[codeLine]        public static _Sample_Data GetData(string argKeyName)
[codeLine]        {
[codeLine]            if (false == DataTable.Tables.ContainsKey(tableType))
[codeLine]                return null;
[codeLine]            _Sample_Table table = DataTable.Tables[tableType] as _Sample_Table;
[codeLine]            if (null == table)
[codeLine]                return null;
[codeLine]            if (false == table.nameDictionary.ContainsKey(argKeyName))
[codeLine]                return null;
[codeLine]            return new(table.nameDictionary[argKeyName]);
[codeLine]        }
[codeLine]
[codeLine]        public static List<_Sample_Data> GetList()
[codeLine]        {
[codeLine]            if (null == _instance)
[codeLine]            {
[codeLine]                Debug.LogError($"{tableType} is not instantiate!");
[codeLine]                return null;
[codeLine]            }
[codeLine]
[codeLine]            List<_Sample_Data> result = new();
[codeLine]
[codeLine]            // 값 복사를 통해서 Table 값과 분리하여 전달
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                result.Add(new (data));
[codeLine]            }
[codeLine]            return result;
[codeLine]        }
[codeLine]
[codeLine]        public static void SetData(string argKeyName, _Sample_Data argData)
[codeLine]        {
[codeLine]            if (false == _instance.nameDictionary.ContainsKey(argKeyName))
[codeLine]            {
[codeLine]                Debug.LogError($"Don't have string key({argKeyName})");
[codeLine]                return;
[codeLine]            }
[codeLine]
[codeLine]            _instance.nameDictionary[argKeyName] = argData;
[codeLine]            _instance.IndexDictionary[argData.id] = argData;
[codeLine]        }
[codeLine]
[codeLine]        public static void Export()
[codeLine]        {
[codeLine]            string writeText = "[\n";
[codeLine]            foreach (var data in _instance.IndexDictionary.Values)
[codeLine]            {
[codeLine]                writeText += JsonConvert.SerializeObject(data) + ",\n";
[codeLine]                Debug.Log($"[ExportTest]{data}\n{JsonConvert.SerializeObject(data)}");
[codeLine]            }
[codeLine]
[codeLine]            writeText += "]";
[codeLine]            string jsonPath = Path.Combine(UmUtil.GetResourceJsonPath(), jsonFileName);
[codeLine]            Debug.Log(jsonPath);
[codeLine]            // 파일 생성 및 저장
[codeLine]            File.WriteAllText(jsonPath, writeText);
[codeLine]        }
[codeLine]    }
[codeLine]}
[lineCheck]Construct(19/22)
_declareInfo(25/28)
_toStringInfo(31/33)
[jsonLine]key(id)type(Integer)typeStr(int)
        public int id { get; set; }
[jsonLine]key(name)type(String)typeStr(string)
        public string name { get; set; }
[jsonLine]key(health)type(Float)typeStr(float)
        public float health { get; set; }
[jsonLine]key(mana)type(Float)typeStr(float)
        public float mana { get; set; }
[jsonLine]key(strength)type(Float)typeStr(float)
        public float strength { get; set; }
[jsonLine]key(agility)type(Float)typeStr(float)
        public float agility { get; set; }
[jsonLine]key(intellect)type(Float)typeStr(float)
        public float intellect { get; set; }
[jsonLine]key(defense)type(Float)typeStr(float)
        public float defense { get; set; }
length(147)
Assets\ExternalRecourses\Travis Game Assets\Hit Impact Effects\Demo Scene\Scripts\HitImpactEffectsPreview.cs(28,21): warning CS0108: 'HitImpactEffectsPreview.light' hides inherited member 'Component.light'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(63,36): warning CS0108: 'UIManagerTool.GetEventSystemRaycastResults()' hides inherited member 'UIManager.GetEventSystemRaycastResults()'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(72,21): warning CS0108: 'UIManagerTool.IsRaycastUI()' hides inherited member 'UIManager.IsRaycastUI()'. Use the new keyword if hiding was intended.
Assets\Scripts\Action\Action.cs(68,28): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\MoveSetCharacter.cs(20,41): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\DrawDebugCharacter.cs(46,21): warning CS0219: The variable 'pivot' is assigned but its value is never used
Assets\Scripts\Action\MoveSet.cs(139,26): warning CS0168: The variable 'e' is declared but never used
Assets\Scripts\UI\UIHudManager.cs(35,30): warning CS0168: The variable 'e' is declared but never used
Assets\Scripts\Utils\GameManager.cs(126,67): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\Utils\GameManager.cs(127,48): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\UI\UIActionPlayerPage.cs(139,32): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\UI\UIActionPlayerPage.cs(141,41): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\UI\UIActionPlayerPage.cs(143,56): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\UI\UIActionPlayerPage.cs(144,63): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\UI\UIActionPlayerPage.cs(146,88): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\UI\UIActionPlayerPage.cs(152,43): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\UI\UIActionPlayerPage.cs(153,51): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\UI\UIActionPlayerPage.cs(158,60): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\UI\UIActionPlayerPage.cs(162,52): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\UI\UIActionPlayerPage.cs(167,77): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\Utils\Input\InputManager.cs(50,17): warning CS0414: The field 'InputManager._holdMaxSize' is assigned but its value is never used
Assets\Scripts\Character.cs(160,18): warning CS0414: The field 'Character._checkGround' is assigned but its value is never used
Assets\Scripts\Character.cs(171,26): warning CS0414: The field 'Character._backWallObjs' is assigned but its value is never used
Assets\Scripts\State\LandingState.cs(8,18): warning CS0414: The field 'LandingState._inputDelayMSec' is assigned but its value is never used
Assets\Scripts\State\Damaged\KnockBackDamagedState.cs(8,18): warning CS0414: The field 'KnockBackDamagedState._knockBackTimeMilliSec' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(42,40): warning CS0414: The field 'UIActionPlayerPage._startRate' is assigned but its value is never used
Assets\Scripts\Character.cs(170,26): warning CS0414: The field 'Character._frontWallObjs' is assigned but its value is never used
Assets\Scripts\AttackCollider.cs(19,41): warning CS0414: The field 'AttackCollider._colliderType' is assigned but its value is never used
Assets\Scripts\PartCollider.cs(5,43): warning CS0414: The field 'PartCollider._colliderType' is assigned but its value is never used
Assets\Scripts\Projectile\Projectile.cs(14,19): warning CS0414: The field 'Projectile._moveTween' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(45,23): warning CS0414: The field 'UIActionPlayerPage._pinStart' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(46,23): warning CS0414: The field 'UIActionPlayerPage._pinEnd' is assigned but its value is never used
Assets\Scripts\State\Npc\NpcJumpDownState.cs(6,19): warning CS0414: The field 'NpcJumpDownState._jumpTimer' is assigned but its value is never used
Assets\Scripts\Character.cs(169,26): warning CS0414: The field 'Character._rightWallObjs' is assigned but its value is never used
Assets\Scripts\State\RunStopState.cs(6,19): warning CS0414: The field 'RunStopState._jumpTimer' is assigned but its value is never used
Assets\Scripts\Character.cs(168,26): warning CS0414: The field 'Character._leftWallObjs' is assigned but its value is never used
Assets\Scripts\SceneMain\SceneMoveSet.cs(10,21): warning CS0414: The field 'SceneMoveSet.testFrame' is assigned but its value is never used
Assets\Scripts\State\Npc\NpcJumpUpState.cs(7,19): warning CS0414: The field 'NpcJumpUpState._jumpTimer' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(43,40): warning CS0414: The field 'UIActionPlayerPage._endRate' is assigned but its value is never used
Should not grab hot control with an active capture
Should not be capturing when there is a hotcontrol
스크립트 컴파일이 완료되었습니다.
Assets\ExternalRecourses\Travis Game Assets\Hit Impact Effects\Demo Scene\Scripts\HitImpactEffectsPreview.cs(28,21): warning CS0108: 'HitImpactEffectsPreview.light' hides inherited member 'Component.light'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(63,36): warning CS0108: 'UIManagerTool.GetEventSystemRaycastResults()' hides inherited member 'UIManager.GetEventSystemRaycastResults()'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(72,21): warning CS0108: 'UIManagerTool.IsRaycastUI()' hides inherited member 'UIManager.IsRaycastUI()'. Use the new keyword if hiding was intended.
Assets\Scripts\MoveSetCharacter.cs(20,41): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\Action\MoveSet.cs(139,26): warning CS0168: The variable 'e' is declared but never used
Assets\Scripts\DrawDebugCharacter.cs(46,21): warning CS0219: The variable 'pivot' is assigned but its value is never used
Assets\Scripts\UI\UIHudManager.cs(35,30): warning CS0168: The variable 'e' is declared but never used
Assets\Scripts\Utils\GameManager.cs(126,67): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\Utils\GameManager.cs(127,48): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\SceneMain\SceneMoveSet.cs(10,21): warning CS0414: The field 'SceneMoveSet.testFrame' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(43,40): warning CS0414: The field 'UIActionPlayerPage._endRate' is assigned but its value is never used
Assets\Scripts\State\Damaged\KnockBackDamagedState.cs(8,18): warning CS0414: The field 'KnockBackDamagedState._knockBackTimeMilliSec' is assigned but its value is never used
Assets\Scripts\Character.cs(171,26): warning CS0414: The field 'Character._backWallObjs' is assigned but its value is never used
Assets\Scripts\PartCollider.cs(5,43): warning CS0414: The field 'PartCollider._colliderType' is assigned but its value is never used
Assets\Scripts\State\RunStopState.cs(6,19): warning CS0414: The field 'RunStopState._jumpTimer' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(42,40): warning CS0414: The field 'UIActionPlayerPage._startRate' is assigned but its value is never used
Assets\Scripts\AttackCollider.cs(19,41): warning CS0414: The field 'AttackCollider._colliderType' is assigned but its value is never used
Assets\Scripts\Character.cs(160,18): warning CS0414: The field 'Character._checkGround' is assigned but its value is never used
Assets\Scripts\State\Npc\NpcJumpDownState.cs(6,19): warning CS0414: The field 'NpcJumpDownState._jumpTimer' is assigned but its value is never used
Assets\Scripts\Character.cs(170,26): warning CS0414: The field 'Character._frontWallObjs' is assigned but its value is never used
Assets\Scripts\State\LandingState.cs(8,18): warning CS0414: The field 'LandingState._inputDelayMSec' is assigned but its value is never used
Assets\Scripts\Character.cs(169,26): warning CS0414: The field 'Character._rightWallObjs' is assigned but its value is never used
Assets\Scripts\Projectile\Projectile.cs(14,19): warning CS0414: The field 'Projectile._moveTween' is assigned but its value is never used
Assets\Scripts\State\Npc\NpcJumpUpState.cs(7,19): warning CS0414: The field 'NpcJumpUpState._jumpTimer' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(45,23): warning CS0414: The field 'UIActionPlayerPage._pinStart' is assigned but its value is never used
Assets\Scripts\Character.cs(168,26): warning CS0414: The field 'Character._leftWallObjs' is assigned but its value is never used
Assets\Scripts\Utils\Input\InputManager.cs(50,17): warning CS0414: The field 'InputManager._holdMaxSize' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(46,23): warning CS0414: The field 'UIActionPlayerPage._pinEnd' is assigned but its value is never used
스크립트 컴파일이 완료되었습니다.
Assets\ExternalRecourses\Travis Game Assets\Hit Impact Effects\Demo Scene\Scripts\HitImpactEffectsPreview.cs(28,21): warning CS0108: 'HitImpactEffectsPreview.light' hides inherited member 'Component.light'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(63,36): warning CS0108: 'UIManagerTool.GetEventSystemRaycastResults()' hides inherited member 'UIManager.GetEventSystemRaycastResults()'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(72,21): warning CS0108: 'UIManagerTool.IsRaycastUI()' hides inherited member 'UIManager.IsRaycastUI()'. Use the new keyword if hiding was intended.
Assets\Scripts\DrawDebugCharacter.cs(46,21): warning CS0219: The variable 'pivot' is assigned but its value is never used
Assets\Scripts\Action\MoveSet.cs(139,26): warning CS0168: The variable 'e' is declared but never used
Assets\Scripts\UI\UIHudManager.cs(35,30): warning CS0168: The variable 'e' is declared but never used
Assets\Scripts\Utils\GameManager.cs(126,67): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\Utils\GameManager.cs(127,48): error CS1061: 'ActionData' does not contain a definition for 'actionName' and no accessible extension method 'actionName' accepting a first argument of type 'ActionData' could be found (are you missing a using directive or an assembly reference?)
Assets\Scripts\UI\UIActionPlayerPage.cs(46,23): warning CS0414: The field 'UIActionPlayerPage._pinEnd' is assigned but its value is never used
Assets\Scripts\State\Npc\NpcJumpUpState.cs(7,19): warning CS0414: The field 'NpcJumpUpState._jumpTimer' is assigned but its value is never used
Assets\Scripts\State\Npc\NpcJumpDownState.cs(6,19): warning CS0414: The field 'NpcJumpDownState._jumpTimer' is assigned but its value is never used
Assets\Scripts\Character.cs(168,26): warning CS0414: The field 'Character._leftWallObjs' is assigned but its value is never used
Assets\Scripts\State\LandingState.cs(8,18): warning CS0414: The field 'LandingState._inputDelayMSec' is assigned but its value is never used
Assets\Scripts\SceneMain\SceneMoveSet.cs(10,21): warning CS0414: The field 'SceneMoveSet.testFrame' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(45,23): warning CS0414: The field 'UIActionPlayerPage._pinStart' is assigned but its value is never used
Assets\Scripts\Character.cs(169,26): warning CS0414: The field 'Character._rightWallObjs' is assigned but its value is never used
Assets\Scripts\Projectile\Projectile.cs(14,19): warning CS0414: The field 'Projectile._moveTween' is assigned but its value is never used
Assets\Scripts\Character.cs(160,18): warning CS0414: The field 'Character._checkGround' is assigned but its value is never used
Assets\Scripts\AttackCollider.cs(19,41): warning CS0414: The field 'AttackCollider._colliderType' is assigned but its value is never used
Assets\Scripts\Utils\Input\InputManager.cs(50,17): warning CS0414: The field 'InputManager._holdMaxSize' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(42,40): warning CS0414: The field 'UIActionPlayerPage._startRate' is assigned but its value is never used
Assets\Scripts\Character.cs(170,26): warning CS0414: The field 'Character._frontWallObjs' is assigned but its value is never used
Assets\Scripts\State\RunStopState.cs(6,19): warning CS0414: The field 'RunStopState._jumpTimer' is assigned but its value is never used
Assets\Scripts\Character.cs(171,26): warning CS0414: The field 'Character._backWallObjs' is assigned but its value is never used
Assets\Scripts\PartCollider.cs(5,43): warning CS0414: The field 'PartCollider._colliderType' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(43,40): warning CS0414: The field 'UIActionPlayerPage._endRate' is assigned but its value is never used
Assets\Scripts\State\Damaged\KnockBackDamagedState.cs(8,18): warning CS0414: The field 'KnockBackDamagedState._knockBackTimeMilliSec' is assigned but its value is never used
스크립트 컴파일이 완료되었습니다.
Assets\ExternalRecourses\Travis Game Assets\Hit Impact Effects\Demo Scene\Scripts\HitImpactEffectsPreview.cs(28,21): warning CS0108: 'HitImpactEffectsPreview.light' hides inherited member 'Component.light'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(63,36): warning CS0108: 'UIManagerTool.GetEventSystemRaycastResults()' hides inherited member 'UIManager.GetEventSystemRaycastResults()'. Use the new keyword if hiding was intended.
Assets\Scripts\Utils\UIManagerTool.cs(72,21): warning CS0108: 'UIManagerTool.IsRaycastUI()' hides inherited member 'UIManager.IsRaycastUI()'. Use the new keyword if hiding was intended.
Assets\Scripts\DrawDebugCharacter.cs(46,21): warning CS0219: The variable 'pivot' is assigned but its value is never used
Assets\Scripts\Action\MoveSet.cs(139,26): warning CS0168: The variable 'e' is declared but never used
Assets\Scripts\UI\UIHudManager.cs(35,30): warning CS0168: The variable 'e' is declared but never used
Assets\Scripts\UI\UIActionPlayerPage.cs(46,23): warning CS0414: The field 'UIActionPlayerPage._pinEnd' is assigned but its value is never used
Assets\Scripts\SceneMain\SceneMoveSet.cs(10,21): warning CS0414: The field 'SceneMoveSet.testFrame' is assigned but its value is never used
Assets\Scripts\Character.cs(170,26): warning CS0414: The field 'Character._frontWallObjs' is assigned but its value is never used
Assets\Scripts\Character.cs(171,26): warning CS0414: The field 'Character._backWallObjs' is assigned but its value is never used
Assets\Scripts\State\RunStopState.cs(6,19): warning CS0414: The field 'RunStopState._jumpTimer' is assigned but its value is never used
Assets\Scripts\Projectile\Projectile.cs(14,19): warning CS0414: The field 'Projectile._moveTween' is assigned but its value is never used
Assets\Scripts\Character.cs(160,18): warning CS0414: The field 'Character._checkGround' is assigned but its value is never used
Assets\Scripts\Character.cs(168,26): warning CS0414: The field 'Character._leftWallObjs' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(45,23): warning CS0414: The field 'UIActionPlayerPage._pinStart' is assigned but its value is never used
Assets\Scripts\State\Npc\NpcJumpDownState.cs(6,19): warning CS0414: The field 'NpcJumpDownState._jumpTimer' is assigned but its value is never used
Assets\Scripts\Character.cs(169,26): warning CS0414: The field 'Character._rightWallObjs' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(42,40): warning CS0414: The field 'UIActionPlayerPage._startRate' is assigned but its value is never used
Assets\Scripts\AttackCollider.cs(19,41): warning CS0414: The field 'AttackCollider._colliderType' is assigned but its value is never used
Assets\Scripts\Utils\Input\InputManager.cs(50,17): warning CS0414: The field 'InputManager._holdMaxSize' is assigned but its value is never used
Assets\Scripts\State\LandingState.cs(8,18): warning CS0414: The field 'LandingState._inputDelayMSec' is assigned but its value is never used
Assets\Scripts\UI\UIActionPlayerPage.cs(43,40): warning CS0414: The field 'UIActionPlayerPage._endRate' is assigned but its value is never used
Assets\Scripts\State\Npc\NpcJumpUpState.cs(7,19): warning CS0414: The field 'NpcJumpUpState._jumpTimer' is assigned but its value is never used
Assets\Scripts\PartCollider.cs(5,43): warning CS0414: The field 'PartCollider._colliderType' is assigned but its value is never used
Assets\Scripts\State\Damaged\KnockBackDamagedState.cs(8,18): warning CS0414: The field 'KnockBackDamagedState._knockBackTimeMilliSec' is assigned but its value is never used
